use strict;
use warnings;
use Getopt::Long;
use smog_common;
use Scalar::Util qw(looks_like_number);
our @ISA = 'Exporter';
our @EXPORT = qw(%supported_directives);

my $tmpstring = <<EOT;

                                      smog_ions

      	smog_ions is part of the SMOG 2 distribution, available at smog-server.org

        This tool uses a SMOG .top and .gro file, along command line arguments to 
	add ions to a SMOG model. Note, this does not change the underlying model, it 
 	only adds ions to the gro and top files.

        For usage information, issue flag -help, or see the SMOG manual.

        For questions regarding this script, contact info\@smog-server.org

EOT
my $wide=88;
printdashed($wide);
printcenter($wide,$tmpstring);
printdashed($wide);


# in supported_directives, a value of 1 means is it required, 0 is not supported. >1 means optional
our %supported_directives = ( 'defaults' => '1',
        'atomtypes' => '1',
        'moleculetype' => '1',
        'nonbond_params' => '2',
        'atoms' => '1',
        'bonds' => '1',
        'angles' => '1',
        'dihedrals' => '1',
        'pairs' => '1',
        'exclusions' => '1',
        'system' => '1',
        'molecules' => '1',
        'position_restraints' => '0'
        );



sub getcell
{
	my ($UNIT0,$UNIT1,$UNIT2,$width0,$width1,$width2,$Xt,$Yt,$Zt)=@_;
	my @UNIT0=@{$UNIT0};
	my @UNIT1=@{$UNIT1};
	my @UNIT2=@{$UNIT2};
	# calculate and subtract projection along c vector
	my $proj=$UNIT2[0]*$Xt+$UNIT2[1]*$Yt+$UNIT2[2]*$Zt;
	my $C2=int($proj/$width2);
	$Xt-=$UNIT2[0]*$proj;
	$Yt-=$UNIT2[1]*$proj;
	$Zt-=$UNIT2[2]*$proj;
	$proj=$UNIT1[0]*$Xt+$UNIT1[1]*$Yt+$UNIT1[2]*$Zt;
	my $C1=int($proj/$width1);
	$Xt-=$UNIT1[0]*$proj;
	$Yt-=$UNIT1[1]*$proj;
	$Zt-=$UNIT1[2]*$proj;
	$proj=$UNIT0[0]*$Xt+$UNIT0[1]*$Yt+$UNIT0[2]*$Zt;
	my $C0=int($proj/$width0);

	return ($C0,$C1,$C2);

}

sub usage
{
  print <<EOT;

usage: smog_ions ... options

   Required flags
	-ionnm  <string>   : name of ion to be added to the system
	-ionn   <integer>  : number of ions to add
	-ionq   <float>    : charge of ions
	-ionm   <float>    : mass of ions
	-ionC12 <float>    : C12 excluded-volume parameter for added ions
   Optional settings 
	-t <string>	   : optional template directory to read ion definitions
	-f [smog.top]      : input SMOG forcefield file
	-g [smog.gro]      : input SMOG configuration file
	-of [smog.ions.top]: output SMOG forcefield file for smog.ions system
	-og [smog.ions.gro]: output SMOG configuration file for smog.ions system
	-mindist [0.5]     : the minimium distance (nm) between an added ion and any other atom in the system
	-ionC6 [0.0]	   : C6 parameter for added ions
	-warn [0]	   : convert first N errors into warnings
	-help 		   : show options 
EOT
  if ( @_ ){
   smog_quit("Command-line argument \"@_\" not recognized.");
  }else{
   exit(1);
  }
}


my $inputTOP="smog.top";
my $inputGRO="smog.gro";
my $outputtop="smog.ions.top";
my $outputgro="smog.ions.gro";
my $addnum=0;
my $mindist=0.5;
my $addname;
my $addC12;
my $addC6;
my $addcharge;
my $addmass;
my $template;
my $help;
my @grobox;
quit_init();
checkForModules();

usage() if (@ARGV < 1 || !GetOptions('help|?' => \$help, 'f=s' => \$inputTOP, 'g=s' => \$inputGRO,  
        'of=s' => \$outputtop, 'og=s' => \$outputgro, 'ionn=i' => \$addnum, 'ionm=f' => \$addmass, 'ionC12=f' => \$addC12, 't=s' => \$template,'ionC6=f' => \$addC6, 'ionnm=s' => \$addname, 'ionq=f' => \$addcharge,  'mindist=f' => \$mindist,  'warn=i' => \$maxwarn, 
        '<>' => \&usage)
        or defined $help); 



my $maxbu=10;
foreach my $filen($outputtop, $outputgro){
	my ($ext) = $filen =~ /(\.[^.]+)$/;
	if($filen ne "" && -e $filen){
		for(my $bu=1;$bu<=$maxbu;$bu++){
			my $buname="$filen.bu$bu";
			if( ! -e $buname){	
			print "$filen already exists.  Backing up to $buname\n";
			system("mv $filen $buname");
			last;
			}
			if($bu == $maxbu){
		 	smog_quit ("Already backed up $maxbu copies of $filen."); 
			}
		}
	}
}


if(!defined $addname){
	smog_quit("Please indicate which ion species to add with the -ionnm option"); 
}
if($addnum <1){
	smog_quit("At least one ion must be added.");
}

if(defined $template){
	if(defined $addmass || defined $addcharge || defined $addC12 || defined $addC6){
		smog_quit("When using the -t option, you may not provide the following additional flags: -ionC12, -ionC6, -ionq, -ionm.");
	}
	# read the definitions for ions from ions.def
	my $ionfile="$template/ions.def";
	print "\nWill read definitions of ion parameters in $ionfile\n";
	open(IONFILE,"$ionfile") or smog_quit("Can\'t open $ionfile");
	my $ionmatch=0;
	while(<IONFILE>){
		my $LINE=$_;
		chomp($LINE);
		my ($data,$comment)=checkcomment($LINE);
		if($data eq ""){
			#skip comment lines; 
			next;
		}
		$data =~ s/^\s+|\s+$//g;
		# check that nonbonded params are only added if the atom types are present
		my @tarray=split(/\s+/,$data);
		if($#tarray != 4){
			smog_quit("ions.def format error.  Expected: name, mass, charge, C12, C6.\n Found\n $data");
		}else{
			if($tarray[0] eq "$addname"){
				if($ionmatch >0){
					smog_quit("Found multiple entries for $addname in ions.def file");
				}
				# found the ion in the def file
				$ionmatch++;
				$addmass=$tarray[1];
				$addcharge=$tarray[2];
				$addC12=$tarray[3];
				$addC6=$tarray[4];
				if(!looks_like_number($addmass)){
					smog_quit("value of mass ($addmass) is not numeric.");
				}elsif($addmass<=0){
					smog_quit("mass must be positive.");
				}
				if(!looks_like_number($addcharge)){
					smog_quit("value of charge ($addcharge) is not numeric.");
				}
				if(!looks_like_number($addC12)){
					smog_quit("value of C12 ($addC12) is not numeric.");
				}
				if(!looks_like_number($addC6)){
					smog_quit("value of C6 ($addC6) is not numeric.");
				}
			}
		}
	}
	if($ionmatch !=1){
		smog_quit("Could not find $addname in ions.def file");
	}
	close(IONFILE);
}else{
	if(!defined $addmass){
		smog_quit("mass of ion not defined.");
	}
	if(!defined $addcharge){
		smog_quit("charge of ion must be provided on command line.");
	}
	if(!defined $addC12){
		smog_quit("C12 parameter of ion must be provided on command line.");
	}
	if(!defined $addC6){
		$addC6=0;
	}
	if(length($addname) > 5){
		smog_quit("Ion name $addname too long. Maximum of 5 characters allowed.");
	}
}
if($addC12<=0){
	smog_quit("C12 must be positive.");
}

if($addC6<0){
	smog_quit("C6 can not be negative.");
}

warninfo();

#check and add file name extensions, if missing
my ($ext)= $outputgro =~ /(\.[^.]+)$/;
if(!defined $ext || $ext ne ".gro"){
	$outputgro .=  ".gro";
}
($ext)= $outputtop =~ /(\.[^.]+)$/;
if(!defined $ext || $ext ne ".top"){
	$outputtop .=  ".top";
}

print "\nWill add ions to $inputTOP and $inputGRO\n";
print "Will try to add $addnum $addname ions with charge $addcharge and mass $addmass\n";
print "Will use C12=$addC12 E*nm^12 and C6=$addC6 E*nm^6\n";
print "Will place ions at least $mindist nm from the existing system\n";
print "Will write the new forcefield and configuration to $outputtop and $outputgro\n\n"; 


### make a new gro file 

open(GROFILE,"$inputGRO") or smog_quit("Can\'t open GRO file $inputGRO");
my $groheader=<GROFILE>;
chomp($groheader);

my $TMP=<GROFILE>;
chomp($TMP);
$TMP =~ s/\t/ /g; 
$TMP =~ s/^\s+|\s+$//g;
$TMP =~ s/ +/ /g;
my @A=split(/\s+/,$TMP);
my $NATOMS=$A[0];
my @GRODATA;
my @X;
my @Y;
my @Z;

unless($NATOMS =~ m/^\d+/){smog_quit("Number of atoms on line 2 of gro file ($NATOMS), is not an integer.")}

for(my $I=0;$I<$NATOMS;$I++){
	# store gro data
	my $LINE=<GROFILE>;
	chomp($LINE);
	$GRODATA[$I+1]=$LINE;
}
my $grodim=<GROFILE>;
chomp($grodim);
$grodim =~ s/^\s+//g; 
my @tmpbox = split(/\s+/,$grodim);
# if we have a rectangular box, then set the additional box vector components to zero;

if($#tmpbox == 2){
	print "Rectangular box detected\n";
}elsif($#tmpbox == 8){
	print "Triclinic  box detected\n";
}else{
	smog_quit("Wrong number of box vectors provided: unrecognized dimensions");
}

for(my $I=0;$I<9;$I++){
	if(!defined $tmpbox[$I]){
		$tmpbox[$I]=0;
	}
}
# reorder the indices to be more logical
$grobox[0] =$tmpbox[0];
$grobox[4] =$tmpbox[1];
$grobox[8] =$tmpbox[2];
$grobox[1] =$tmpbox[3];
$grobox[2] =$tmpbox[4];
$grobox[3] =$tmpbox[5];
$grobox[5] =$tmpbox[6];
$grobox[6] =$tmpbox[7];
$grobox[7] =$tmpbox[8];

print "box vectors:\n";
for (my $I=0;$I<9;$I++){
	print "\t$grobox[$I]";
	if(($I+1) % 3 ==0){
		print "\n";
	}
}
print "\n";

close(GROFILE);

if(-e $outputgro){smog_quit("$outputgro already exists.")};
open(GROFILE,">$outputgro") or smog_quit("Can\'t open output GRO file $outputgro");
print GROFILE "$groheader\n";
$NATOMS+=$addnum;
print GROFILE "$NATOMS\n";
for(my $I=1;$I<=$NATOMS-$addnum;$I++){

	my $XT=substr($GRODATA[$I],20,8);
	my $YT=substr($GRODATA[$I],28,8);
	my $ZT=substr($GRODATA[$I],36,8);

	while($ZT > $grobox[8]){
                $XT-=$grobox[6];
                $YT-=$grobox[7];
                $ZT-=$grobox[8];
	}
	while($ZT <= 0){
                $XT+=$grobox[6];
                $YT+=$grobox[7];
                $ZT+=$grobox[8];
	}
	while($YT > $grobox[4]){
                $XT-=$grobox[3];
                $YT-=$grobox[4];
                $ZT-=$grobox[5];
	}
	while($YT <= 0){
                $XT+=$grobox[3];
                $YT+=$grobox[4];
                $ZT+=$grobox[5];
	}
	while($XT > $grobox[0]){
                $XT-=$grobox[0];
                $YT-=$grobox[1];
                $ZT-=$grobox[2];
	}
	while($XT <= 0){
                $XT+=$grobox[0];
                $YT+=$grobox[1];
                $ZT+=$grobox[2];
	}

	substr($GRODATA[$I],20,8)=sprintf("%8.3f", $XT);
	substr($GRODATA[$I],28,8)=sprintf("%8.3f", $YT);
	substr($GRODATA[$I],36,8)=sprintf("%8.3f", $ZT);

	print GROFILE "$GRODATA[$I]\n";
	$X[$I]=$XT;
	$Y[$I]=$YT;
	$Z[$I]=$ZT;
}
print "adding ions to gro file...\n";
my $XTT;
my $YTT;
my $ZTT;
my $XT;
my $YT;
my $ZT;
my $added=1;
# set up grid parameters for the system.
my %GRIDATOMS;
my @UNIT0=($grobox[0],$grobox[1],$grobox[2]);
my @UNIT1=($grobox[3],$grobox[4],$grobox[5]);
my @UNIT2=($grobox[6],$grobox[7],$grobox[8]);
my $LENGTH0;
my $LENGTH1;
my $LENGTH2;
$LENGTH0=sqrt($UNIT0[0]*$UNIT0[0]+$UNIT0[1]*$UNIT0[1]+$UNIT0[2]*$UNIT0[2]);
$LENGTH1=sqrt($UNIT1[0]*$UNIT1[0]+$UNIT1[1]*$UNIT1[1]+$UNIT1[2]*$UNIT1[2]);
$LENGTH2=sqrt($UNIT2[0]*$UNIT2[0]+$UNIT2[1]*$UNIT2[1]+$UNIT2[2]*$UNIT2[2]);
my $N0=int($LENGTH0/$mindist);
my $gridwidth0=$LENGTH0/$N0;
my $N1=int($LENGTH1/$mindist);
my $gridwidth1=$LENGTH1/$N1;
my $N2=int($LENGTH2/$mindist);
my $gridwidth2=$LENGTH2/$N2;

#later, we will compare distance squared
$mindist*=$mindist;

@UNIT0=($UNIT0[0]/$LENGTH0,$UNIT0[1]/$LENGTH0,$UNIT0[2]/$LENGTH0);
@UNIT1=($UNIT1[0]/$LENGTH1,$UNIT1[1]/$LENGTH1,$UNIT1[2]/$LENGTH1);
@UNIT2=($UNIT2[0]/$LENGTH2,$UNIT2[1]/$LENGTH2,$UNIT2[2]/$LENGTH2);

# grid the current atoms
for(my $I=1;$I<=$NATOMS-$addnum;$I++){
	my ($C0,$C1,$C2)=getcell(\@UNIT0,\@UNIT1,\@UNIT2,$gridwidth0,$gridwidth1,$gridwidth2,$X[$I],$Y[$I],$Z[$I]);
	$GRIDATOMS{"$C0-$C1-$C2"}{$I}=1;
}

for(my $I=$NATOMS-$addnum+1;$I<=$NATOMS;$I++){
	$added++;
	my $mindistt=0;
	my $attempt=0;
	until($mindistt == 1){
		$attempt++;
		$mindistt=1; # if any atoms are too close, this is set to 0, resulting in another attempt.
		if($attempt ==1000){
			smog_quit("Tried 1000 times to add ion number $added. Giving up.");
		}
		my $R1=rand();
		my $R2=rand();
		my $R3=rand();
		# generate possible position
		$XTT=$grobox[0]*$R1+$grobox[3]*$R2+$grobox[6]*$R3;
		$YTT=$grobox[1]*$R1+$grobox[4]*$R2+$grobox[7]*$R3;
		$ZTT=$grobox[2]*$R1+$grobox[5]*$R2+$grobox[8]*$R3;

		# get cell of test atom		
		my ($C0,$C1,$C2)=getcell(\@UNIT0,\@UNIT1,\@UNIT2,$gridwidth0,$gridwidth1,$gridwidth2,$XTT,$YTT,$ZTT);
		# check the adjacent cells, account for PBCs
		my $CELL0;
		my $CELL1;
		my $CELL2;
		for(my $GC0=$C0-1;$GC0<=$C0+1;$GC0++){
			if($GC0==-1){
				$CELL0=$N0;
			}elsif($GC0==$N0+1){
				$CELL0=0;
			}else{
				$CELL0=$GC0;
			}
			for(my $GC1=$C1-1;$GC1<=$C1+1;$GC1++){
				if($GC1==-1){
					$CELL1=$N1;
				}elsif($GC1==$N1+1){
					$CELL1=0;
				}else{
					$CELL1=$GC1;
				}
				for(my $GC2=$C2-1;$GC2<=$C2+1;$GC2++){
					if($GC2==-1){
						$CELL2=$N2;
					}elsif($GC2==$N2+1){
						$CELL2=0;
					}else{
						$CELL2=$GC2;
					}

					# now go through the atoms in the relevant cell
					foreach my $atomi(keys %{$GRIDATOMS{"$CELL0-$CELL1-$CELL2"}}){
						$XT=$XTT-$X[$atomi];
						$YT=$YTT-$Y[$atomi];
						$ZT=$ZTT-$Z[$atomi];
						while($ZT > $grobox[8]/2.0){
				                        $XT-=$grobox[6];
				                        $YT-=$grobox[7];
				                        $ZT-=$grobox[8];
						}
						while($ZT < -$grobox[8]/2.0){
				                        $XT+=$grobox[6];
				                        $YT+=$grobox[7];
				                        $ZT+=$grobox[8];
						}
						while($YT > $grobox[4]/2.0){
				                        $XT-=$grobox[3];
				                        $YT-=$grobox[4];
				                        $ZT-=$grobox[5];
						}
						while($YT < -$grobox[4]/2.0){
				                        $XT+=$grobox[3];
				                        $YT+=$grobox[4];
				                        $ZT+=$grobox[5];
						}
						while($XT > $grobox[0]/2.0){
				                        $XT-=$grobox[0];
				                        $YT-=$grobox[1];
				                        $ZT-=$grobox[2];
						}
						while($XT < -$grobox[0]/2.0){
				                        $XT+=$grobox[0];
				                        $YT+=$grobox[1];
				                        $ZT+=$grobox[2];
						}

						my $dist=($XT)**2+($YT)**2+($ZT)**2;
						if($dist<$mindist){
							$mindistt=0;
							last;
						}
					}
				}
			}
		}
	}

	# if kept, then add to the hash of gridded atoms

	$X[$I]=$XTT;	
	$Y[$I]=$YTT;	
	$Z[$I]=$ZTT;
	my ($C0,$C1,$C2)=getcell(\@UNIT0,\@UNIT1,\@UNIT2,$gridwidth0,$gridwidth1,$gridwidth2,$XTT,$YTT,$ZTT);
	$GRIDATOMS{"$C0-$C1-$C2"}{$I}=1;
	my $J = $I % 100000;	
	printf GROFILE "%5i%-5s%5s%5i%8.3f%8.3f%8.3f\n", $J,$addname, $addname, $J, $X[$I], $Y[$I], $Z[$I];

}

### end of adding ions to the gro

print GROFILE "$grodim\n";

##******************* END OF GRO MODIFICATIONS**************************

print "adding ions to top file...\n";
#read in the top file, with comments stripped

my $string=loadfile($inputTOP);
my ($DATA,$DIRLIST)=checkdirectives($string);
my %DIRLIST=%{$DIRLIST};
my @DATA=@{$DATA};

open(FILE, "$inputTOP") or smog_quit("Can not open $inputTOP"); 

if(-e $outputtop){smog_quit("$outputtop already exists.")}
open(TOPOUT,">$outputtop") or smog_quit("Can\'t open $outputtop for writing");


my $NBbuffer="";
my $NBPpresent=0;
my %typesinsystem;
my $alreadypresent=0;
while (<FILE>){
	my $LINE = $_;
	my $LINEORIG=$LINE;
	chomp($LINE);
	my ($data,$comment)=checkcomment($LINE);
	if(checkforinclude($LINE,$data,*TOPOUT)){next;};

	# check if we hit the atomtypes.  if we do, then add the atomtype.
	if($data eq ""){
		print TOPOUT "$comment\n"; 
		next;
	}
	my @TMP=split(/ /,$data);
	if($TMP[0] eq "[" and $TMP[1] eq "atomtypes"){
		print TOPOUT "$data\n"; 
	
		$LINE = <FILE>;
		$LINEORIG=$LINE;
		chomp($LINE);
		($data,$comment)=checkcomment($LINE);
		if(checkforinclude($LINE,$data,*TOPOUT)){next;};
		# read the current list of atomtypes
		until(($data eq "" and $comment eq "") or substr($data,0,1) eq "[" ){
			$data =~ s/ /\t/g;
			print TOPOUT "$data$comment\n"; 
			$LINE = <FILE>;
			$LINEORIG=$LINE;
			if(!defined $LINE){$data="";$comment="";next;}
			chomp($LINE);
			($data,$comment)=checkcomment($LINE);
			if(checkforinclude($LINE,$data,*TOPOUT)){next;};
			if($data eq ""){next;}
			my @D=split(/\s+/,$data);
			$typesinsystem{$D[0]}=1;
			if($D[0] eq "$addname"){
				$alreadypresent++;
			}
		}
		if($alreadypresent==0){
			print "atomtype $addname not found in .top file. Will add parameters to .top file\n";
			print TOPOUT "$addname\t$addmass\t$addcharge\tA\t$addC6\t$addC12\n\n";
		}elsif($alreadypresent==1){
			print "atomtype $addname already defined in .top file. Will not overwrite parameters\n";
		}else{
			smog_quit("atomtype $addname already defined multiple times in top file.");
		}

		# append the new atomtype
		$LINEORIG=$LINE;

		if($alreadypresent==1){
			# since we have already defined the atomtype, we will not check for anything from extras
		}else{
			# if -t is used and there is an extras file, read it
			if(defined $template && -e "$template/extras"){
		        	my $extrafile="$template/extras";
				print "Will check if we should add any nonbond_params from extras file $extrafile";
				open(EXTRA,"$extrafile") or smog_quit("Unable to open $extrafile");
				while(my $line = <EXTRA>)
				{
					chomp($line);
					my ($A,$B)=checkcomment($line);
					if($A eq ""){next;}  # skip the line if it is only a comment
				    	my @tokens = split('<',$line);
					my $directive = $tokens[0];
					$directive =~ s/^\s+|\s+$//g;
					my $stuff = $tokens[1];
					$stuff =~ s/^\s+|\s+$//g;
					# check that nonbonded params are only added if the atom types are present
					if($directive eq "nonbond_params"){
						my @tarray=split(/\s+/,$stuff);
						if((exists $typesinsystem{$tarray[0]} && $tarray[1] eq "$addname") || (exists $typesinsystem{$tarray[1]} && $tarray[0] eq "$addname") || ($tarray[0] eq "$addname" && $tarray[1] eq "$addname") ){
							$NBbuffer .= "$stuff\n";
						}	
					}
				}
			}
		}
		print TOPOUT "\n";
	}
	if(!defined $TMP[0]){
		$TMP[0]="";
	}

	if($TMP[0] eq "[" and $TMP[1] eq "nonbond_params"){
		$NBPpresent=1;
		print TOPOUT "$data\n"; 
	
		$LINE = <FILE>;
		$LINEORIG=$LINE;
		chomp($LINE);
		($data,$comment)=checkcomment($LINE);
		if(checkforinclude($LINE,$data,*TOPOUT)){next;};
		# read the current list of nonbond_params
		until(($data eq "" and $comment eq "") or substr($data,0,1) eq "[" ){
			$data =~ s/ /\t/g;
			print TOPOUT "$data$comment\n"; 
			$LINE = <FILE>;
			$LINEORIG=$LINE;
			if(!defined $LINE){$data="";$comment="";next;}
			chomp($LINE);
			($data,$comment)=checkcomment($LINE);
			if(checkforinclude($LINE,$data,*TOPOUT)){next;};
			if($data eq ""){next;}
		}
		print TOPOUT "$NBbuffer";
	}

	if($TMP[0] eq "[" and $TMP[1] eq "moleculetype"){
		# if we did not find a nonbond_params, add it.
		if($NBPpresent==0 && $NBbuffer ne ""){
			print TOPOUT "[nonbond_params]\n$NBbuffer\n\n";
		}


		# add a new molecule type
		if($alreadypresent == 0){
			print TOPOUT "[ moleculetype ]\n$addname 1\n\n[ atoms ]\n1 $addname 1 $addname $addname 1\n\n";
			# since we just added it, don't add again
			$alreadypresent++;
		}
	}

	if($TMP[0] eq "[" and $TMP[1] eq "molecules"){
		print TOPOUT "$LINEORIG"; 
	
		$LINE = <FILE>;
		$LINEORIG=$LINE;
		chomp($LINE);
		$LINE =~ s/\t/ /g; 
		$LINE =~ s/^\s+|\s+$//g;
		$LINE =~ s/ +/ /g;
		until($LINE eq ""){
			print TOPOUT "$LINEORIG"; 
			$LINE = <FILE>;
			if(!defined $LINE){$LINE="";$LINEORIG="";}
			$LINEORIG=$LINE;
			chomp($LINE);
			$LINE =~ s/\t/ /g; 
			$LINE =~ s/^\s+|\s+$//g;
			$LINE =~ s/ +/ /g;
		}
		print TOPOUT "$addname $addnum\n";

	}

	print TOPOUT "$LINEORIG"; 
	# end of atomtypes continue
}
warnsummary();
print "\n\tSUCCESS: Added $addnum $addname ions.\n\n";
exit(0);
