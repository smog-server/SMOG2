use strict;
use warnings;
use Getopt::Long;
use smog_common;
print <<EOT;
*****************************************************************************************
                                      smog_ions

      	smog_ions is part of the SMOG 2 distribution, available at smog-server.org

        This tool uses a SMOG .top and .gro file, along command line arguments to 
	add ions to a SMOG model. Note, this does not change the underlying model, it 
 	only adds ions to the gro and top files.

        For usage information, issue flag -help, or see the SMOG manual.

        For questions regarding this script, contact info\@smog-server.org

*****************************************************************************************
EOT

sub usage
{
  print <<EOT;

usage: smog_ions ... options

   Required flags
	-ionnm  <string>   : name of ion to be added to the system
	-ionn   <integer>  : number of ions to add
	-ionq   <float>    : charge of ions
	-ionm   <float>    : mass of ions
	-ionC12 <float>    : C12 excluded-volume parameter for added ions
   Optional settings 
	-f [smog.top]      : input SMOG forcefield file
	-g [smog.gro]      : input SMOG configuration file
	-of [smog.ions.top]: output SMOG forcefield file for smog.ions system
	-og [smog.ions.gro]: output SMOG configuration file for smog.ions system
	-mindist [0.5]     : the minimium distance (nm) between an added ion and any other atom in the system
	-ionC6 [0.0]	   : C6 parameter for added ions
	-warn [0]	   : convert first N errors into warnings
	-help 		   : show options 
EOT
  if ( @_ ){
   smog_quit("Command-line argument \"@_\" not recognized.");
  }else{
   exit(1);
  }
}


my $inputTOP="smog.top";
my $inputGRO="smog.gro";
my $outputtop="smog.ions.top";
my $outputgro="smog.ions.gro";
my $addnum=0;
my $mindist=0.5;
my $addname ="";
my $addC12 = "";
my $addC6 = 0;
my $addcharge = "";
my $addmass = "";
my $help;
my @grobox;
quit_init();
checkForModules();

usage() if (@ARGV < 5 || !GetOptions('help|?' => \$help, 'f=s' => \$inputTOP, 'g=s' => \$inputGRO,  
        'of=s' => \$outputtop, 'og=s' => \$outputgro, 'ionn=i' => \$addnum, 'ionm=f' => \$addmass, 'ionC12=f' => \$addC12, 'ionC6=f' => \$addC6, 'ionnm=s' => \$addname, 'ionq=f' => \$addcharge,  'mindist=f' => \$mindist,  'warn=i' => \$maxwarn, 
        '<>' => \&usage)
        or defined $help); 

my $maxbu=10;
foreach my $filen($outputtop, $outputgro){
	my ($ext) = $filen =~ /(\.[^.]+)$/;
	if($filen ne "" && -e $filen){
		for(my $bu=1;$bu<=$maxbu;$bu++){
			my $buname="$filen.bu$bu";
			if( ! -e $buname){	
			print "$filen already exists.  Backing up to $buname\n";
			system("mv $filen $buname");
			last;
			}
			if($bu == $maxbu){
		 	smog_quit ("Already backed up $maxbu copies of $filen."); 
			}
		}
	}
}

if($addmass eq ""){
	smog_quit("mass of ion must be provided on command line.");
}
if($addcharge eq ""){
	smog_quit("charge of ion must be provided on command line.");
}
if($addC12 eq ""){
	smog_quit("C12 parameter of ion must be provided on command line.");
}
if($addname eq ""){
	smog_quit("name of ion must be provided on command line.");
}
if(length($addname) > 5){
	smog_quit("Ion name $addname too long. Maximum of 5 characters allowed.");
}
warninfo();

if($addnum <1){
	smog_quit("At least one ion must be added.");
}


#check and add file name extensions, if missing
my ($ext)= $outputgro =~ /(\.[^.]+)$/;
if(!defined $ext || $ext ne ".gro"){
	$outputgro .=  ".gro";
}
($ext)= $outputtop =~ /(\.[^.]+)$/;
if(!defined $ext || $ext ne ".top"){
	$outputtop .=  ".top";
}

print "\nWill add ions to $inputTOP and $inputGRO\n";
print "Will try to add $addnum $addname ions with charge $addcharge and mass $addmass\n";
print "Will use C12=$addC12 E*nm^12 and C6=$addC6 E*nm^6\n";
print "Will place ions at least $mindist nm from the existing system\n";
print "Will write the new forcefield and configuration to $outputtop and $outputgro\n\n"; 

#later, we will compare distance squared
$mindist*=$mindist;

### make a new gro file 

open(GROFILE,"$inputGRO") or smog_quit("Can\'t open GRO file $inputGRO");
my $groheader=<GROFILE>;
chomp($groheader);

my $TMP=<GROFILE>;
chomp($TMP);
$TMP =~ s/\t/ /g; 
$TMP =~ s/^\s+|\s+$//g;
$TMP =~ s/ +/ /g;
my @A=split(/\s+/,$TMP);
my $NATOMS=$A[0];
my @GRODATA;
my @X;
my @Y;
my @Z;

unless($NATOMS =~ m/^\d+/){smog_quit("Number of atoms on line 2 of gro file ($NATOMS), is not an integer.")}

for(my $I=0;$I<$NATOMS;$I++){
	# store gro data
	my $LINE=<GROFILE>;
	chomp($LINE);
	$GRODATA[$I+1]=$LINE;
}
my $grodim=<GROFILE>;
chomp($grodim);
$grodim =~ s/^\s+//g; 
my @tmpbox = split(/\s+/,$grodim);
# if we have a rectangular box, then set the additional box vector components to zero;

if($#tmpbox == 2){
	print "Rectangular box detected\n";
}elsif($#tmpbox == 8){
	print "Triclinic  box detected\n";
}else{
	smog_quit("Wrong number of box vectors provided: unrecognized dimensions");
}

for(my $I=0;$I<9;$I++){
	if(!defined $tmpbox[$I]){
		$tmpbox[$I]=0;
	}
}
# reorder the indices to be more logical
$grobox[0] =$tmpbox[0];
$grobox[4] =$tmpbox[1];
$grobox[8] =$tmpbox[2];
$grobox[1] =$tmpbox[3];
$grobox[2] =$tmpbox[4];
$grobox[3] =$tmpbox[5];
$grobox[5] =$tmpbox[6];
$grobox[6] =$tmpbox[7];
$grobox[7] =$tmpbox[8];

print "box vectors ";
for (my $I=0;$I<9;$I++){
	print "$grobox[$I] ";
}
print "\n";

close(GROFILE);

if(-e $outputgro){smog_quit("$outputgro already exists.")};
open(GROFILE,">$outputgro") or smog_quit("Can\'t open output GRO file $outputgro");
print GROFILE "$groheader\n";
$NATOMS+=$addnum;
print GROFILE "$NATOMS\n";
for(my $I=1;$I<=$NATOMS-$addnum;$I++){

	my $XT=substr($GRODATA[$I],20,8);
	my $YT=substr($GRODATA[$I],28,8);
	my $ZT=substr($GRODATA[$I],36,8);

	while($ZT > $grobox[8]){
                $XT-=$grobox[6];
                $YT-=$grobox[7];
                $ZT-=$grobox[8];
	}
	while($ZT <= 0){
                $XT+=$grobox[6];
                $YT+=$grobox[7];
                $ZT+=$grobox[8];
	}
	while($YT > $grobox[4]){
                $XT-=$grobox[3];
                $YT-=$grobox[4];
                $ZT-=$grobox[5];
	}
	while($YT <= 0){
                $XT+=$grobox[3];
                $YT+=$grobox[4];
                $ZT+=$grobox[5];
	}
	while($XT > $grobox[0]){
                $XT-=$grobox[0];
                $YT-=$grobox[1];
                $ZT-=$grobox[2];
	}
	while($XT <= 0){
                $XT+=$grobox[0];
                $YT+=$grobox[1];
                $ZT+=$grobox[2];
	}

	substr($GRODATA[$I],20,8)=sprintf("%8.3f", $XT);
	substr($GRODATA[$I],28,8)=sprintf("%8.3f", $YT);
	substr($GRODATA[$I],36,8)=sprintf("%8.3f", $ZT);

	print GROFILE "$GRODATA[$I]\n";
	$X[$I]=$XT;
	$Y[$I]=$YT;
	$Z[$I]=$ZT;
}
print "adding ions to gro file...\n";
my $XTT;
my $YTT;
my $ZTT;
my $XT;
my $YT;
my $ZT;
my $added=1;
for(my $I=$NATOMS-$addnum+1;$I<=$NATOMS;$I++){
	print "adding ion $added\n";
	$added++;
	my $mindistt=-1;
	my $attempt=0;
	until($mindistt > $mindist){
		$attempt++;
		if($attempt ==1000){
			smog_quit("Tried 1000 times to add ion number $added. Giving up.");
		}
		my $R1=rand();
		my $R2=rand();
		my $R3=rand();
		# generate possible position
		$XTT=$grobox[0]*$R1+$grobox[3]*$R2+$grobox[6]*$R3;
		$YTT=$grobox[1]*$R1+$grobox[4]*$R2+$grobox[7]*$R3;
		$ZTT=$grobox[2]*$R1+$grobox[5]*$R2+$grobox[8]*$R3;

	    	$mindistt=($X[1]-$XTT)**2+($Y[1]-$YTT)**2+($Z[1]-$ZTT)**2;
		#check dist with all previous atoms
		for(my $J=2;$J<$I;$J++){
		$XT=$XTT-$X[$J];
		$YT=$YTT-$Y[$J];
		$ZT=$ZTT-$Z[$J];
		while($ZT > $grobox[8]/2.0){
                        $XT-=$grobox[6];
                        $YT-=$grobox[7];
                        $ZT-=$grobox[8];
		}
		while($ZT < -$grobox[8]/2.0){
                        $XT+=$grobox[6];
                        $YT+=$grobox[7];
                        $ZT+=$grobox[8];
		}
		while($YT > $grobox[4]/2.0){
                        $XT-=$grobox[3];
                        $YT-=$grobox[4];
                        $ZT-=$grobox[5];
		}
		while($YT < -$grobox[4]/2.0){
                        $XT+=$grobox[3];
                        $YT+=$grobox[4];
                        $ZT+=$grobox[5];
		}
		while($XT > $grobox[0]/2.0){
                        $XT-=$grobox[0];
                        $YT-=$grobox[1];
                        $ZT-=$grobox[2];
		}
		while($XT < -$grobox[0]/2.0){
                        $XT+=$grobox[0];
                        $YT+=$grobox[1];
                        $ZT+=$grobox[2];
		}

			my $dist=($X[$J]-$XT)**2+($Y[$J]-$YT)**2+($Z[$J]-$ZT)**2;
			if($mindistt > $dist){
				$mindistt=$dist;
			}
		}
	}


	$X[$I]=$XTT;	
	$Y[$I]=$YTT;	
	$Z[$I]=$ZTT;
	my $J = $I % 100000;	
	printf GROFILE "%5i%-5s%5s%5i%8.3f%8.3f%8.3f\n", $J,$addname, $addname, $J, $X[$I], $Y[$I], $Z[$I];

}

### end of adding ions to the gro

print GROFILE "$grodim\n";

##******************* END OF GRO MODIFICATIONS**************************

print "adding ions to top file...\n";
#read in the top file, with comments stripped
open(FILE, "$inputTOP") or smog_quit("Can not open $inputTOP"); 

if(-e $outputtop){smog_quit("$outputtop already exists.")}
open(TOPOUT,">$outputtop") or smog_quit("Can\'t open $outputtop for writing");
$added=0;
while (<FILE>){
	my $LINE = $_;
	my $LINEORIG=$LINE;
	chomp($LINE);
	my ($data,$comment)=checkcomment($LINE);
	if($data =~ m/^#/){
		print "will copy preprocessor line directly to new top.\n\t $A\n";
		print TOPOUT "$LINE\n";
		next;
	}

	# check if we hit the atomtypes.  if we do, then add the atomtype.
	if($data eq ""){
		print TOPOUT "$comment\n"; 
		next;
	}
	my @TMP=split(/ /,$data);
	if($TMP[0] eq "[" and $TMP[1] eq "atomtypes"){
		print TOPOUT "$data\n"; 
	
		$LINE = <FILE>;
		$LINEORIG=$LINE;
		chomp($LINE);
		($data,$comment)=checkcomment($LINE);
		if($data =~ m/^#/){
			print "will copy preprocessor line directly to new top.\n\t $A\n";
			print TOPOUT "$LINE\n";
			next;
		}

		until(($data eq "" and $comment eq "") or substr($data,0,1) eq "[" ){
			$data =~ s/ /\t/g;
			print TOPOUT "$data$comment\n"; 
			$LINE = <FILE>;
			$LINEORIG=$LINE;
			if(!defined $LINE){$data="";$comment="";next;}
			chomp($LINE);
			($data,$comment)=checkcomment($LINE);
			if($data =~ m/^#/){
				print "will copy preprocessor line directly to new top.\n\t $A\n";
				print TOPOUT "$LINE\n";
				next;
			}
		}
		print TOPOUT "$addname\t$addmass\t$addcharge\tA\t$addC6\t$addC12\n\n";
		$LINEORIG=$LINE;

	}
	if(!defined $TMP[0]){
		$TMP[0]="";
	}
	if($TMP[0] eq "[" and $TMP[1] eq "moleculetype"){
		# add a new molecule type
		if($added == 0){
			print TOPOUT "[ moleculetype ]\n$addname 1\n\n[ atoms ]\n1 $addname 1 $addname $addname 1\n\n";
			$added=1;
		}
	}

	if($TMP[0] eq "[" and $TMP[1] eq "molecules"){
		print TOPOUT "$LINEORIG"; 
	
		$LINE = <FILE>;
		$LINEORIG=$LINE;
		chomp($LINE);
		$LINE =~ s/\t/ /g; 
		$LINE =~ s/^\s+|\s+$//g;
		$LINE =~ s/ +/ /g;
		until($LINE eq ""){
			print TOPOUT "$LINEORIG"; 
			$LINE = <FILE>;
			if(!defined $LINE){$LINE="";$LINEORIG="";}
			$LINEORIG=$LINE;
			chomp($LINE);
			$LINE =~ s/\t/ /g; 
			$LINE =~ s/^\s+|\s+$//g;
			$LINE =~ s/ +/ /g;
		}
		print TOPOUT "$addname $addnum\n";

	}

	print TOPOUT "$LINEORIG"; 
	# end of atomtypes continue
}
warnsummary();
print "\n\tSUCCESS: Added $addnum $addname ions.\n\n";
exit(0);
