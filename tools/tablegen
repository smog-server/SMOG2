use strict;
use warnings FATAL => 'all';
use Getopt::Long;
use smog_common;

my $tmpstring =<<EOT;

                                     smog_tablegen                                   

     smog_tablegen is part of the SMOG 2 distribution, available at smog-server.org     

  This tool will generate a table for native contacts and Debye-Huckel electrostatic 
               interactions, for use with Structure-based Models in Gromacs. 

 See the SMOG manual for descriptions and usage guidelines for tabulated interactions.

          For questions regarding this script, contact info\@smog-server.org              
EOT
my $wide=88;
printdashed($wide);
printcenter($wide,$tmpstring);
printdashed($wide);


sub usage
{
	print <<EOT;

DESCRIPTION:
 Native contact Potentials: Gromacs supports a 6-12 potential for native contacts. If you
 are using a 6-12 potential, then there is no need to use a table.  However, if would 
 like to use alternate contact potentials of the form (function contact_1 in SMOG 2):
	U=A/r^M-B/r^N,
 then you will need to generate tabulated potentials and forces.

 Electrostatics: When using direct Coulomb interactions, then there is no need for a 
 table. If you would like to use a Debye-Huckel potential to describe screened
 electrostatic interactions, then you should use this script. Parameters for the DH
 potential are decsribed in Givaty and Levy (2009) J. Mol. Biol., 385, pp 1087-1097.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

usage: smog_tablegen  .. options ..

   Optional flags 
	-N [6]   		: exponent of attractive non-bonded interaction
	-M [12]  		: exponent of repulsive non-bonded interaction
	-ic [0]  		: effective monovalent ion concetration (Molar) for DH interaction
	-sd [1.0]		: distance (nm) to start switching function for electrostatics
	-sc [1.5]		: distance (nm) at which switching function enforces elec. interactions go to zero
	-tl [5]  		: length (nm) of table
	-table [table.xvg] 	: output table file
	-help 	  		: show options
EOT
	if ( @_ ){
 		smog_quit("Command-line argument \"@_\" not recognized.");
	}else{
 		exit(1);
	}
}

# Brief description 
# prefactor is a combination of several terms.
# the DH potential that we want to use is
# U=K_Coulomb*B(kappa) Sum {q_i*q_j*exp(-kappa*r_ij)/(epsilon*r_ij)}
# K_Coulomb=1/(4*pi*epsilon_{0})=~33.2 kcal*mol^-1 (nm)
# for dilute systems, B(kappa)~1
# Gromacs automatically multiplies by an 'electric conversion factor,' 
#   equal to 138.935485. We want to undo that, hence the division by 138.



my $exponent1=12;
my $exponent2=6;
my $conc = 0;
my $r1=1.0;
my $rc=1.5;
my $Rtable=5.0;
my $outfilename="table.xvg";
my $help;
quit_init();
checkForModules();

usage() if (@ARGV < 0 || !GetOptions('help|?' => \$help, 'N=i' => \$exponent2, 'M=i' => \$exponent1, 'ic=f' => \$conc, 
        'sd=f' => \$r1, 'sc=f' => \$rc, 'tl=f' => \$Rtable, 'table=s' => \$outfilename, '<>' => \&usage)
        or defined $help); 

my $prefactor=33.20/138.935485;

if($exponent2 >= $exponent1){
	smog_quit ("For consistency with smog2, only M < N is supported");
}

# molar concentration of monovalent ions.
# kappa is the inverse screening length.  Units of nm^-1.
my $kappa=3.2*sqrt($conc);


# switching function: This ensures that the force and potential go continuously
# to zero at the cut-off distance (rc), and it starts switching at rc1.
#what is the length of the table(in nm)?
if($rc <= $r1 && $rc != 0){
	smog_quit("switching distance must be shorter than truncated distance");
}elsif($rc < 0 || $r1 < 0){
	smog_quit("switching distance and truncated distance must be greater than, or equal to, zero");
}elsif($rc>$Rtable){
	smog_quit("table must extend beyond the cutoff distance");
}

$outfilename=checksuffix($outfilename,".xvg");
print "Parameter used to generate table file $outfilename\n";
print "\tM=$exponent1\n\tN=$exponent2\n\tmonovalent ion conc.=$conc\n\tkappa=$kappa\n\tbegin switching function=$r1\n\tend switching function=$rc\n\tLength of table=$Rtable\n";


my $maxbu=10;
foreach my $filen($outfilename){
	my ($ext) = $filen =~ /(\.[^.]+)$/;
	if($filen ne "" && -e $filen){
		for(my $bu=1;$bu<=$maxbu;$bu++){
			my $buname="$filen.bu$bu";
			if( ! -e $buname){	
			print "$filen already exists.  Backing up to $buname\n";
			system("mv $filen $buname");
			last;
			}
			if($bu == $maxbu){
		 	smog_quit ("Already backed up $maxbu copies of $filen."); 
			}
		}
	}
}



open(OUTFILE,">$outfilename") or die "Can\'t open $outfilename for writing.\n";

# what is the spacing of the table (in nm)? 
my $DR=0.002;

sub V
{
	my ($kappa, $R)=@_;
	my $F=exp(-$kappa*$R)/$R;
	return $F;
}

sub Vprime
{
	my ($kappa, $R)=@_;
	my $F=-$kappa*exp(-$kappa*$R)/$R-exp(-$kappa*$R)/($R*$R);
	return $F;
}


# calculate the parameters for the switching function.
my $M;
my $R;
my $N;
my $O;
my $S;
my $T;
my $A;
my $B;
if($rc >0){
	$M=V($kappa,$rc);
	$M=-$M;
	$N=($rc-$r1)**2;
	$O=($rc-$r1)**3;
	$R=Vprime($kappa,$rc);
	$R=-$R;
	$S=2*($rc-$r1);
	$T=3*($rc-$r1)**2;
	$A=(($M/$O)-($R/$T))/(($N/$O)-($S/$T));
	$B=$R/$T-$A*$S/$T;
}else{
	$A=1;
	$B=1;
}
# generate the table file. 

my $Ntable=int($Rtable/$DR);
my $VE;my $VpE;

print OUTFILE<<EOF;
# Force table for use with structure-based SMOG models
# Potential of the form U=q_i*q_j*exp(-kappa*r)/r+A/r^N-B/r^M
# kappa=$kappa nm^-1
# N=$exponent2
# M=$exponent1
# For electrostatics:
#    	switching distance=$r1 nm
#	cutoff distance=$rc nm
#	ion concetration=$conc M
EOF


#first few lines have numbers too big for gromacs to read
#will give segfaults if we don't zero them out
for(my $i=0; $i<8;$i++){
	$R=$i*$DR;
	print OUTFILE "$R 0 0 0.0 0.0 0.0 0.0\n";
}

for(my $i=8; $i<$Ntable;$i++){
	$R=$i*$DR;
	my $R1=-1/$R**$exponent2;
	my $R2=-$exponent2/$R**($exponent2+1);
	my $R3=1/$R**$exponent1;
	my $R4=$exponent1/$R**($exponent1+1);
	if( $R < $r1 && $rc !=0){
		$VE=V($kappa, $R);
		$VE=$prefactor*$VE;
		$VpE=Vprime($kappa, $R);
		$VpE=-$prefactor*$VpE;
		print OUTFILE "$R $VE $VpE $R1 $R2 $R3 $R4\n";
	}elsif($R >= $r1 && $R<=$rc){
		$VE=V($kappa, $R)+$A*($R-$r1)**2+$B*($R-$r1)**3;
		$VE=$prefactor*$VE;
		$VpE=Vprime($kappa, $R)+$A*2*($R-$r1)+$B*3*($R-$r1)**2;
		$VpE=-$prefactor*$VpE;
		print OUTFILE "$R $VE $VpE $R1 $R2 $R3 $R4\n";
	}else{
		print OUTFILE "$R 0.0 0.0 $R1 $R2 $R3 $R4\n"
	}
}
#last line can't have a newline!
$R=$Ntable*$DR;

my $R1=-1/$R**$exponent2;
my $R2=-$exponent2/$R**($exponent2+1);
my $R3=1/$R**$exponent1;
my $R4=$exponent1/$R**($exponent1+1);
print OUTFILE "$R 0.0 0.0 $R1 $R2 $R3 $R4\n";

print "\nTable file written successfully\n\n";
exit(0);
