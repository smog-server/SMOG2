use strict;
use warnings FATAL => 'all';
use smog_common;
use Getopt::Long;
## VARS: ##
my %map;
my %altname;
my %ignorename;
my $rows;
my $atomCount;
my $isFirst;
my $isLast;
my $resInd;
my $chainName;
my $resName;
my @residue;
my @pArr;
my $loopInd;
my $prevResTypeRNA;
my $outputPDB="adjusted.pdb";
my $inputPDB;
my $insertTER;
my $subALA;
my $mapFile;
my $default;
my $renumber;
my $removeH;
my $mapOption;
my $matchexact;
my $help;
my $inputArguments=join(' ',@ARGV);
## MODULE HEADERS ##

# this is called after all subroutines are read in
my $tmpstring = <<"EOT";

                                    smog_adjustPDB                                   

    smog_adjustPDB is part of the SMOG 2 distribution, available at smog-server.org     

    This tool will renumber the atoms in each chain, and modify the names of terminal
        residues, so that they are compatible with the definitions used by SMOG 2

                       See the SMOG manual for usage guidelines.

            For questions regarding this script, contact info\@smog-server.org              
EOT
	
my $wide=88;
printdashed($wide);
printcenter($wide,$tmpstring);
printdashed($wide);

checkForModules();

usage() if (@ARGV < 1 || !GetOptions('help|?' => \$help, 'o=s' => \$outputPDB, 'i=s' => \$inputPDB, 'map=s' => \$mapFile, 'default' => \$default ,'warn=i' => \$maxwarn ,'match' => \$matchexact, 'renumber' => \$renumber, 'insertTER' => \$insertTER, 'subALA' => \$subALA,  'removeH' => \$removeH, '<>' => \&usage) or !defined $inputPDB or defined $help); 

warninfo();

$outputPDB=checksuffix($outputPDB,".pdb");
$inputPDB=checksuffix($inputPDB,".pdb");

if(defined $renumber && defined $insertTER){
	smog_quit("Simultaneous use of -renumber and -insertTER not supported");
}

if (defined $renumber){
	print "\nNOTE: the flag -renumber was selected. Will assign consecutive residue numbering within each chain.\n";
}

if (defined $insertTER){
	print "\nNOTE: the flag -insertTER was selected. Will insert TER lines between non-consecutive residue numbers.\n";
}

if (defined $renumber && defined $insertTER) {
	smog_quit("Can not use -renumber and -insertTER flags together");
}

if(!defined $inputPDB){
	smog_quit("No input PDB was specified. Use -i to specify your input pdb file.");
}else{
	open(OLDPDB,"$inputPDB") or smog_quit("Can't open PDB file $inputPDB.");
	print "Will reformat the PDB file: $inputPDB\n";	
}

if (defined $default){
	print "-default selected. Will use the default map file provided for terminal residue names.\n";
	if(!exists $ENV{"SMOG_PATH"}){
        smog_quit("Environmental Variable SMOG_PATH not set\n");
	}
	if (!defined $matchexact) {
		$mapOption = "$ENV{SMOG_PATH}/share/mapfiles/sbmMap";
	} else {
		$mapOption = "$ENV{SMOG_PATH}/share/mapfiles/sbmMapExact";
	}	
}else{
	if (!defined $mapFile ){
		smog_quit("No map file was provided. Please choose a map file with -map, or use the default map settings with -default.");
	}else{
		$mapOption = $mapFile;
	}
}

foreach my $filen ($outputPDB){
	checkalreadyexists($filen);
}

open(NEWPDB,">$outputPDB") or smog_quit("Can't open the output PDB file.");
print "New file will be written: $outputPDB\n";

readmap();	
adjustInputFile($subALA);
warnsummary();
print "\n\tAdjustment of PDB is complete.\n\n";

#########SUBROUTINES#########

sub usage
{

print <<EOS;
usage: smog_adjustPDB .. options ..

  Options
	-i <filename>           : input PDB to adjust to smog2 format
	-default                : use the default map file provided by smog2 
	-map <filename>         : specify a user-defined mapping file
	-match                  : name residues if they have the exact atoms listed in the map file
                                     Note: Mapping files used for -map and -match are different.  See manual.
	-o [adjusted.pdb]       : output pdb file name
	-renumber               : ignore any residue numbering inconsistencies and renumber residues sequentially
	-removeH                : strip the file of any atoms that begin with "H"
	-insertTER              : Insert "TER" lines between any non-consecutive residue numbers
	-subALA                 : If a residue only has C, CA, N, O, and CB atoms, then rename it ALA 
	-warn [0]               : convert first N errors to warnings (-1: convert all errors) 
	-help                   : show options
EOS

  if ( @_ ){
   	smog_quit("Command-line argument \"@_\" not recognized.");
  }else{
   exit
  }
}

## Returns 1 if a residue is a RNA, else returns zero. ##
sub isRNA{
	my($resName) = @_;
	my %RNAlist=("U",1,"U5",1,"G",1,"G5",1,"A",1,"A5",1,"C",1,"C5",1,"MIA",1);
	if (exists $RNAlist{$resName}){
			return 1;
	}
	return 0;
}

sub renamesummary {
	my ($string,$chain)=@_;
	if ($string ne "") {
		print "Renamed residues/atoms in chain index $chain: $string\n";
	}
}

sub removesummary {
	my ($string,$chain)=@_;
	if($string ne ""){
		print "\nNote: The following atoms were removed from chain $chain: $string\n";
	}
}

sub adjustInputFile{
	my ($subALA)=@_;	
	# Read the molecule PDB into an array (for convenience)
	
	$rows=0;
	while(<OLDPDB>){
		my $line=$_;
		chomp($line);
		$pArr[$rows]=$line;	
		$rows++;
	}
	close OLDPDB;
	
	$isFirst = 1;
	$isLast = 0;
	$resInd = 1;
	$atomCount=0;	
	my $removestring="";	
	my $renamedstring="";
	my $firstresidue=0;
	my $lastresidue=0;
	my $lastresName="";
	my $chainindex=1;
	my $resIDorig;
	# identify all TER and END lines.
	my $k = 0;
	my %isTEREND;
	while($k<$rows){
		if ($pArr[$k] =~ m/^END/ || $pArr[$k] =~ m/^TER/){
			$isTEREND{$k}=1;
		}
		$k++;
	}

	print NEWPDB "COMMENT File generated with: smog_adjustPDB $inputArguments\n";
	## Loops through all PDB rows ##
	$k = 0;
	while($k<$rows){
		my $line=$pArr[$k];	
		chomp($pArr[$k]);
		$pArr[$k] =~ s/^\s+|\s+$//g;
		
		## If end of file: ##
		if ($pArr[$k] =~ m/^END/){
			print NEWPDB "END\n";
			renamesummary($renamedstring,$chainindex);
			removesummary($removestring,$chainindex);
			$renamedstring="";
			$removestring="";
			last;
		}
		
		## If TER line: ##
		elsif($pArr[$k] =~ m/^TER/){
			# if the next line has a TER, or END, then don't write the current TER.
			$k++;
			if(exists $isTEREND{$k}){
				next;
			}
			print NEWPDB "TER\n";
			$atomCount=0;
			$isFirst = 1;
			$resInd = 1;
			renamesummary($renamedstring,$chainindex);
			removesummary($removestring,$chainindex);
			$renamedstring="";
			$removestring="";

			$chainindex++;
		}

		## Exit if there's a BOND line in PDB: ##
		elsif($pArr[$k] =~ /^BOND/){
			smog_quit("Issue at line $k: BOND lines in the input PDB file are not supported by adjustPDB in this Smog version.");
		}

		elsif ($pArr[$k] =~ /^COMMENT/){
			print NEWPDB "$pArr[$k]\n";
			$k++;
			next;
		}
		
		## If atom line: ##
		elsif ($pArr[$k] =~ /^ATOM/ || $pArr[$k] =~ /^HETATM/){

			$firstresidue++;
			my $resNum = substr($pArr[$k],22,5);
			$resNum =~ s/^\s+|\s+$//g;		
			my $newResNum = $resNum;
			if($resNum =~ /^\d+$|^-\d+$/ && $lastresidue =~ /^\d+$|^-\d+$/){
				if($resNum-$lastresidue > 1 && $firstresidue !=1){
					if(!$renumber && !$insertTER){
						smog_quit("Non-consecutive residue numbering detected in original PDB file at residues $lastresidue and  $resNum (near line $k).");
					}elsif($insertTER){
						print "Non-consecutive residue numbering detected.  -insertTER used.  TER will be inserted after:$line\n";
						print NEWPDB "TER\n";
					}
				}
			}elsif(!$renumber){
				smog_quit("Residue IDs must be positive integers. Found: $resNum.");
			}
	
			$resName = substr($pArr[$k],17,4);
			$resName =~ s/^\s+|\s+$//g;
			my $altLoc = substr($pArr[$k],16,1);
			if ($altLoc ne " "){
				smog_quit("Issue at line $k: Alternate location indicators are not supported by SMOG.");
			}
			
			$chainName = substr($pArr[$k],21,1);
			
			## Loop through the resdiue ##
			$loopInd = 0;
			while ($newResNum eq $resNum){
				$atomCount++;	
				## Obtain atom information ##
				my $atomName = substr($pArr[$k],12,4);
				$atomName =~ s/^\s+|\s+$//g;
				my $resNametmp = substr($pArr[$k],17,4);
				$resNametmp =~ s/^\s+|\s+$//g;
				if($loopInd==0){
					$lastresName=$resNametmp;
				}elsif($lastresName ne $resNametmp){
					smog_quit("Atoms within a residue have inconsistent residue names. See\n$pArr[$k]");
				}	
				$residue[$loopInd]->{"atomName"} = $atomName;
				$residue[$loopInd]->{"atomIndex"} = $atomCount;
				$residue[$loopInd]->{"x"} = substr($pArr[$k],30,8);   
				$residue[$loopInd]->{"y"} = substr($pArr[$k],38,8);  
				$residue[$loopInd]->{"z"} = substr($pArr[$k],46,8);  
				$resIDorig = substr($pArr[$k],22,5);
				$resIDorig =~ s/\s+//g;  
				
				$k++;
				
				## Check if next line is END or TER ##
				if ($k == $rows || $pArr[$k] =~ /^END/ || $pArr[$k] =~ /^TER/){
					$newResNum = "";
					$isLast = 1;
					$firstresidue=0;
				}	
				else{
					$newResNum = substr($pArr[$k],22,5);	#get next residue index
					$newResNum =~ s/^\s+|\s+$//g;		
					if ($newResNum eq $resNum){
						$loopInd++;
					}
				}  	
			}
			$lastresidue=$resNum;

			if (!defined $matchexact) {
				# conventional head/tail adjustments
				if(!exists $map{$resName}{"head"} || !exists $map{$resName}{"tail"}){smog_quit("Issue with residue $resName - please check the map file to make sure the residue name is defined.");}
				## Adjust Tail\Head names ##
				if($isFirst && $isLast){
					if("$map{$resName}{\"tail\"}" eq "$map{$resName}{\"head\"}"){
						# if definitions are the same, just call it head
						$isLast=0;
					}else{
						smog_quit("Encountered a single-residue chain. Unclear whether to treat this as a head, or tail...");
					}
				}
				if ($isFirst){
					my $newResName = $map{$resName}{"head"};
					$resName = $newResName;
				}
				if ($isLast){
						my $newResName = $map{$resName}{"tail"};
						$resName = 	$newResName;
				}
				
				# check if subALA
				if(defined $subALA && $resName ne "ALA" && $resName ne "ALAT"){
					# only check to sub if turned on, and not already ALA
					my %atomsin;
					for(my $i=0; $i<=$loopInd; $i++){
						my $aName = $residue[$i]->{"atomName"};
						$atomsin{$aName}=1;
					}
					if($loopInd == 4){
						if(exists $atomsin{"C"} && exists $atomsin{"CA"} && exists $atomsin{"N"} && exists $atomsin{"O"} && exists $atomsin{"CB"} ){
							$resName="ALA"
						}
					}
					if($loopInd == 5){
						if(exists $atomsin{"C"} && exists $atomsin{"CA"} && exists $atomsin{"N"} && exists $atomsin{"O"} && exists $atomsin{"CB"} && exists $atomsin{"OXT"} ){
							$resName="ALAT"
						}
					}
				}
				for(my $i=0; $i<=$loopInd; $i++){
					my $aName = $residue[$i]->{"atomName"};
					$aName =~ s/'/*/g;
					if ($aName eq "OP1"){$aName="O1P"};
					if ($aName eq "OP2"){$aName="O2P"};
					if ($aName eq "OP3"){$aName="O3P"};
					if (($resName eq "ILE" || $resName eq "ILET") &&  $aName eq "CD"){$aName="CD1"};
					my $ind = $residue[$i]->{"atomIndex"};
					my $x = $residue[$i]->{"x"};
					my $y = $residue[$i]->{"y"};
					my $z = $residue[$i]->{"z"};
					if(defined $removeH && $aName =~ m/^H/){
						$removestring .= "$resName$resInd-$aName ";
					}else{
					    printf NEWPDB "ATOM  %5d %4s %-4s%s%4d    %8.3f%8.3f%8.3f\n",$ind,$aName,$resName,$chainName,$resInd,$x,$y,$z;
					}
				}

			} elsif (defined $matchexact) {
				# get and sort atom names. We can update this with regexes later for more complex matching
				my @tmparr;
				for(my $i=0; $i<=$loopInd; $i++){
					my $aName = $residue[$i]->{"atomName"};
					if(exists $altname{"$resName-$aName"}){
						my $tn=$aName;
						$aName=$altname{"$resName-$aName"};
						$renamedstring .="$resName$resIDorig-$tn->$aName ";
					} elsif (exists $altname{"*-$aName"}){
						# if no exact replacement found, see if there is a wildcard match
						my $tn=$aName;
						$aName=$altname{"*-$aName"};
						$renamedstring .="$resName$resIDorig-$tn->$aName ";
					} 
					$aName =~ s/'/*/g;
					$tmparr[$i]=$aName;
				}
				my $str="";
				foreach my $I(sort @tmparr) {
					unless(defined $removeH && $I =~ m/^H/){
						$str.="$I ";
					}
				}
				my $nres;
				if(!exists $ignorename{$resName}) {
					if ($isFirst == 1 && exists $map{"$str first"}) {
						$nres=$map{"$str first"};
					} elsif ($isLast == 1 && exists $map{"$str last"}) {
						$nres=$map{"$str last"};
					} elsif (exists $map{$str}) {
						$nres=$map{$str};
					} else {
						smog_quit("Unable to find a match for residue beginning with:\n$pArr[$k-$loopInd-1]: $str");
					} 

					if ($resName ne $nres) {
						$renamedstring .="$resName$resIDorig->$nres$resInd "; 
					}

				} else {
					#ignoring renaming of this residue	
					$nres=$resName;
				}

				for(my $i=0; $i<=$loopInd; $i++){
					my $ind = $residue[$i]->{"atomIndex"};
					my $x = $residue[$i]->{"x"};
					my $y = $residue[$i]->{"y"};
					my $z = $residue[$i]->{"z"};
					my $aName = $tmparr[$i];
					if(defined $removeH && $aName =~ m/^H/){
						$removestring .= "$resName$resInd-$aName ";
					}else{
					    printf NEWPDB "ATOM  %5d %4s %-4s%s%4d    %8.3f%8.3f%8.3f\n",$ind,$aName,$nres,$chainName,$resInd,$x,$y,$z;
					}
				}

			} else {
				smog_quit("internal error 1");
			}


			#LEAVE CURRENT RESIDUE AND UPDATE FLAGS#
			$isFirst = 0;
			$isLast = 0;

			$resInd++;
			$prevResTypeRNA = isRNA($resName);
			undef @residue; 
		}
		## If the line is niether ATOM, BOND, COMMENT, TER or END - exit. ##
		else{
			smog_quit("Issue at line $k:\n$pArr[$k]\n\t is not supported by SMOG.\n\t Lines supported: ATOM, HETATM, TER, BOND, COMMENT, END");
		}
	}
	close NEWPDB;
}

sub readmap {
	## CACHE MAP ##
	#Note: Map files has to be in format <residue> <head_name> <tail_name>
	open(MAP,$mapOption) || smog_quit("Cannot open Map file $mapOption\n");
	print "Mapping file $mapOption will be read.\n";
	
	if (! defined $matchexact) {
		# use the old head/tail convention for renaming
		while(my $line = <MAP>)
		{
			## SKIP COMMENT LINE ##
			my ($A,$B)=checkcomment($line);
			if($A eq ""){next;}  # skip the line if it is only a comment
			my @entries = split(/\s+/,$A);
			#map-->residue-->{head|tail} 
			if($#entries != 2){
				my $count=$#entries+1;
				smog_quit("Looking for 3 fields in $mapOption, but found $count. Offending line:\n$line");
			}
			$map{$entries[0]}{"head"} = $entries[1];
			$map{$entries[0]}{"tail"} = $entries[2];
		}
	} else {
		# rename residues based one exact matches, only
		while(my $line = <MAP>)
		{
			## SKIP COMMENT LINE ##
			my ($A,$B)=checkcomment($line);
			if($A eq ""){next;}  # skip the line if it is only a comment
			my @entries = split(/\s+/,$A);
			my @tmparr;
			#map-->residue-->{head|tail} 
			if($#entries < 1){
				my $count=$#entries+1;
				smog_quit("Looking for at least 2 fields in $mapOption, but found $count. Offending line:\n$line");
			}
	
			if($entries[0] =~ /^[Aa][Ll][Tt][Nn][Aa][Mm][Ee]$/) {
				if($#entries < 3){
					my $count=$#entries+1;
					smog_quit("When giving ALTNAME in map file, must have at least 4 fields (ALTNAME <RES> <TARGET NAME> <ALTERNATE NAMES>). Offending line:\n$line");
				}
	
				for( my $I=3;$I<=$#entries;$I++){
					#save with key "resname-target name"
					if(exists $altname{"$entries[1]-$entries[$I]"}){
						smog_quit("Repeated altname entry in mapping file. Offending line:\n$line");
					}
					$altname{"$entries[1]-$entries[$I]"}=$entries[2];
				}
				
			}

			if($entries[0] =~ /^[Ii][Gg][Nn][Oo][Rr][Ee][Rr][Ee][Ss]$/) {
				if($#entries != 1 ){
					my $count=$#entries+1;
					smog_quit("When giving IgnoreRes in map file, must have 2 fields (IgnoreRes <RESNAME>). Offending line:\n$line");
				}
	
				#save with key "resname-target name"
				if(exists $ignorename{"$entries[1]"}){
					smog_quit("Repeated IgnoreRes entry in mapping file. Offending line:\n$line");
				}
				$ignorename{"$entries[1]"}=0;
				print "Note: Will not rename $entries[1] residues\n"
			}

			for( my $I=1;$I<=$#entries;$I++){
				$tmparr[$I-1]=$entries[$I];
			}
			my $str="";
			my $flag="";
			foreach my $I (sort @tmparr) {
				if($I =~ m/^%/){
					$I =~ s/%//g;
					$flag=" $I";
				}else{
					$str.="$I ";
				}
			}
			$str.="$flag";
			# key is the list of atoms
			if(!exists $map{$str}) {
				$map{$str}=$entries[0];
			} else {
				smog_quit("Mapping file ($mapOption) defines two residues as having the same atoms: $map{$str}, $entries[0]");
			}
		}
		# check that no ignoreRes residues were also given atoms
		foreach my $resname (values %map){
			if(exists $ignorename{$resname}){
				smog_quit("Residue \"$resname\" listed in map file with atoms, and also listed under ignoreRes");
			}
		}
	}
}

# END OF SUBROUTINES

