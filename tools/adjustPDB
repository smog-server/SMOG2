use strict;
use warnings;
use smog_common;
## VARS: ##
my %map;
my $rows;
my $atomCount;
my $isHead;
my $isTail;
my $resInd;
my $chainName;
my $resName;
my @residue;
my @pArr;
my $loopInd;
my $prevResTypeRNA;
my $noexit=0;
my $outputPDB="adjusted.pdb";
my $inputPDB;
my $mapFile;
my $default;
my $renumber;
my $removeH;
my $mapOption;
my $help;
my $inputArguments=join(' ',@ARGV);
## MODULE HEADERS ##
use Getopt::Long;

	my $tmpstring = <<"EOT";

                                      smog_adjustPDB                                   

    smog_adjustPDB is part of the SMOG 2 distribution, available at smog-server.org     

    This tool will renumber the atoms in each chain, and modify the names of terminal
        residues, so that they are compatible with the definitions used by SMOG 2

                       See the SMOG manual for usage guidelines.

            For questions regarding this script, contact info\@smog-server.org              
EOT

my $wide=88;
printdashed($wide);
printcenter($wide,$tmpstring);
printdashed($wide);

sub usage
{

print <<EOS;
usage: smog_adjustPDB .. options ..

  Options
	-i <filename>		: input PDB to adjust to smog2 format
	-default 		: use the default file name provided by smog2 
	-map <filename>		: specify a user-defined mapping file
	-o [adjusted.pdb] 	: output pdb file name
	-renumber 		: ignore any residue numbering inconsistencies and renumber residues sequentially
	-removeH		: strip the file of any atoms that begin with "H"
	-warn [0] 		: convert first N errors to warnings (-1: convert all errors) 
	-help 	  		: show options
EOS

  if ( @_ ){
   	smog_quit("Command-line argument \"@_\" not recognized.");
  }else{
   exit
  }

}

checkForModules();

usage() if (@ARGV < 1 || !GetOptions('help|?' => \$help, 'o=s' => \$outputPDB, 'i=s' => \$inputPDB, 'map=s' => \$mapFile, 'default' => \$default ,'warn=i' => \$maxwarn, 'renumber' => \$renumber, 'removeH' => \$removeH, '<>' => \&usage) or !defined $inputPDB or defined $help); 

warninfo();

$outputPDB=checksuffix($outputPDB,".pdb");
$inputPDB=checksuffix($inputPDB,".pdb");

if (defined $renumber){
	print "\nNOTE: the flag -renumber was selected. Will assign consecutive residue numbering within each chain.\n";
}

if(!defined $inputPDB){
	smog_quit("No input PDB was specified. Use -i to specify your input pdb file.");
}else{
	open(OLDPDB,"$inputPDB") or smog_quit("Can't open PDB file $inputPDB.");
	print "Will reformat the PDB file: $inputPDB\n";	
}

if (defined $default){
	print "\n-default selected. Will use the default map file provided for terminal residue names.\n";
	if(!exists $ENV{"SMOG_PATH"}){
        smog_quit("Environmental Variable SMOG_PATH not set\n");
	}
	$mapOption = "$ENV{SMOG_PATH}/share/mapfiles/sbmMap";	
}else{
	if (!defined $mapFile ){
		smog_quit("No map file was provided. Please choose a map file with -map, or use the default map settings with -default.");
	}else{
		$mapOption = $mapFile;
	}
}

my $maxbu=10;
foreach my $filen($outputPDB){
	my ($ext) = $filen =~ /(\.[^.]+)$/;
	if($filen ne "" && -e $filen){
		for(my $bu=1;$bu<=$maxbu;$bu++){
			my $buname="$filen.bu$bu";
			if( ! -e $buname){	
			print "$filen already exists.  Backing up to $buname\n";
			system("mv $filen $buname");
			last;
			}
			if($bu == $maxbu){
		 	smog_quit ("Already backed up $maxbu copies of $filen."); 
			}
		}
	}
}


open(NEWPDB,">$outputPDB") or smog_quit("Can't open the output PDB file.");
print "New file will be written: $outputPDB\n";

## CACHE MAP ##
#Note: Map files has to be in format <residue> <head_name> <tail_name>
open(MAP,$mapOption) || smog_quit("Cannot open Map file\n");
print "Mapping file $mapOption will be used.\n";

while(my $line = <MAP>)
{
  ## SKIP COMMENT LINE ##
  chomp($line);
  if($line =~ /#/){next;}
  my @entries = split(/\s+/,$line);
  #map-->residue-->{head|tail} 
  if($#entries != 2){
   my $count=$#entries+1;
   smog_quit("Looking for 3 fields in $mapOption, but found $count.\n
   				Offending line: $line");
  }
  $map{$entries[0]}{"head"} = $entries[1];
  $map{$entries[0]}{"tail"} = $entries[2];
}

## Returns 1 if a residue is a RNA or DNA, else returns zero. ##
sub isRNA{
	my($resName) = @_;
	my %RNAlist=("U",1,"U5",1,"G",1,"G5",1,"A",1,"A5",1,"C",1,"C5",1,"MIA",1);
	if (exists $RNAlist{$resName}){
			return 1;
	}
	return 0;
}


sub adjustInputFile(){
	
	# Read the molecule PDB into an array (for convinience)
	
	$rows=0;
	while(<OLDPDB>){
		my $line=$_;
		chomp($line);
		$pArr[$rows]=$line;	
		$rows++;
	}
	close OLDPDB;
	
	$isHead = 1;
	$isTail = 0;
	$resInd = 1;
	$atomCount=0;	
	my $k = 0;
	
	my $firstresidue=0;
	my $lastresidue=0;
	my $lastresName="";
	print NEWPDB "COMMENT File generated with: smog_adjustPDB $inputArguments\n";
	## Loops through all PDB rows ##
	while($k<$rows){
		
		chomp($pArr[$k]);
		$pArr[$k] =~ s/^\s+|\s+$//g;
		
		## If end of file: ##
		if ($pArr[$k] =~ m/^END/){
			print NEWPDB "END\n";
			last;
		}
		
		## If TER line: ##
		elsif($pArr[$k] =~ m/^TER/){
			print NEWPDB "TER\n";
			$atomCount=0;
			$isHead = 1;
			$resInd = 1;
			$k++;
		}

		## Exit if there's a BOND line in PDB: ##
		elsif($pArr[$k] =~ /^BOND/){
			smog_quit("Issue at line $k: BOND lines in the input PDB file are not supported by adjustPDB in this Smog version.");
		}

		elsif ($pArr[$k] =~ /^COMMENT/){
			print NEWPDB "$pArr[$k]\n";
			$k++;
			next;
		}
		
		## If atom line: ##
		elsif ($pArr[$k] =~ /^ATOM/ || $pArr[$k] =~ /^HETATM/){

			$firstresidue++;
			my $resNum = substr($pArr[$k],22,5);
			$resNum =~ s/^\s+|\s+$//g;		
			my $newResNum = $resNum;
			if($resNum =~ /^\d+$|^-\d+$/ && $lastresidue =~ /^\d+$|^-\d+$/){
				if($resNum-$lastresidue > 1 && $firstresidue !=1 && !$renumber){
					smog_quit("Non-consecutive residue numbering detected in original PDB file at residues $lastresidue and  $resNum (near line $k).");
				}
			}elsif(!$renumber){
				smog_quit("Non-integer residue ID found: $resNum.");
			}
	
			$resName = substr($pArr[$k],17,4);
			$resName =~ s/^\s+|\s+$//g;
			my $altLoc = substr($pArr[$k],16,1);
			if ($altLoc ne " "){
				smog_quit("Issue at line $k: Alternate location indicators are not supported by SMOG.");
			}
			
			$chainName = substr($pArr[$k],21,1);
			
			## Loop through the resdiue ##
			$loopInd = 0;
			while ($newResNum eq $resNum){
				$atomCount++;	
				## Obtain atom information ##
				my $atomName = substr($pArr[$k],12,4);
				$atomName =~ s/^\s+|\s+$//g;
				my $resNametmp = substr($pArr[$k],17,4);
				$resNametmp =~ s/^\s+|\s+$//g;
				if($loopInd==0){
					$lastresName=$resNametmp;
				}elsif($lastresName ne $resNametmp){
					smog_quit("Atoms within a residue have inconsistent names. See\n$pArr[$k]");
				}	
				$residue[$loopInd]->{"atomName"} = $atomName;
				$residue[$loopInd]->{"atomIndex"} = $atomCount;
				$residue[$loopInd]->{"x"} = substr($pArr[$k],30,8);   
				$residue[$loopInd]->{"y"} = substr($pArr[$k],38,8);  
				$residue[$loopInd]->{"z"} = substr($pArr[$k],46,8);  
				
				$k++;
				
				## Check if next line is END or TER ##
				if ($k == $rows || $pArr[$k] =~ /^END/ || $pArr[$k] =~ /^TER/){
					$newResNum = "";
					$isTail = 1;
					$firstresidue=0;
				}	
				else{
					$newResNum = substr($pArr[$k],22,5);	#get next residue index
					$newResNum =~ s/^\s+|\s+$//g;		
					if ($newResNum eq $resNum){
						$loopInd++;
					}
				}  	
			}
			$lastresidue=$resNum;

			if(!exists $map{$resName}{"head"} || !exists $map{$resName}{"tail"}){smog_quit("Issue with residue $resName - please check the map file to make sure the residue name is defined.");}
			## Adjust Tail\Head names ##
			if($isHead && $isTail){
				if("$map{$resName}{\"tail\"}" eq "$map{$resName}{\"head\"}"){
					# if definitions are the same, just call it head
					$isTail=0;
				}else{
					smog_quit("Encountered a single-residue chain. Unclear whether to treat this as a head, or tail...");
				}
			}
			if ($isHead){
				my $newResName = $map{$resName}{"head"};
				$resName = $newResName;
			}
			if ($isTail){
					my $newResName = $map{$resName}{"tail"};
					$resName = 	$newResName;
			}
			
			for(my $i=0; $i<$loopInd+1; $i++){
				my $aName = $residue[$i]->{"atomName"};
				if ($aName =~ /'/){
					chop($aName);
					$aName .= "*";
				}
				if ($aName eq "OP1"){$aName="O1P"};
				if ($aName eq "OP2"){$aName="O2P"};
				if ($aName eq "OP3"){$aName="O3P"};
				if (($resName eq "ILE" || $resName eq "ILET") &&  $aName eq "CD"){$aName="CD1"};
				my $ind = $residue[$i]->{"atomIndex"};
				my $x = $residue[$i]->{"x"};
				my $y = $residue[$i]->{"y"};
				my $z = $residue[$i]->{"z"};
				if(defined $removeH && $aName =~ m/^H/){
					print "found $aName\n";
				}else{
				    printf NEWPDB "ATOM  %5d %4s %-4s%s%4d    %8.3f%8.3f%8.3f\n",$ind,$aName,$resName,$chainName,$resInd,$x,$y,$z;
				}
			}

			#LEAVE CURRENT RESIDUE AND UPDATE FLAGS#
			$isHead = 0;
			$isTail = 0;
			$resInd++;
			$prevResTypeRNA = isRNA($resName);
			undef @residue; 
		}
		
		## If the line is niether ATOM, BOND, COMMENT, TER or END - exit. ##
		else{
			smog_quit("Issue at line $k:\n$pArr[$k]\n\t is not supported by SMOG.\n\t Lines supported: ATOM, HETATM, TER, BOND, COMMENT, END");
		}
	}
	
	close NEWPDB;
}

adjustInputFile();
warnsummary();
print "\n\tAdjustment of PDB is complete.\n\n";
