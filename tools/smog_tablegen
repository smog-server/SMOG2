use strict;
use warnings;
print <<EOT;
*****************************************************************************************
                                     smog_tablegen                                   

     smog_tablegen is part of the SMOG 2 distribution, available at smog-server.org     

 This tool will generate a table for native contacts and Debye-Huckel electrostatic 
 interactions, for use with Structure-based Models in Gromacs. 

 Native contact Potentials: Gromacs supports a 6-12 potential for native contacts. If you
 are using a 6-12 potential, then there is no need to use a table.  However, if would 
 like to use alternate contact potentials of the form (function contact_1 in SMOG 2):
	U=A/r^N-B/r^M,
 then you will need to generate force table.

 Electrostatics: When using direct Coulomb interactions, then there is no need for a 
 table. If you would like to use a Debye-Huckel potential, to describe screened
 electrostatic interactions, then you should use this script. Parameters for the D-H
 potential are decsribed in Givaty and Levy (2009) J. Mol. Biol., 385, pp 1087-1097. 

 If you are not including electrostatics, set electrostatic truncate distance to zero.

 See the SMOG manual for descriptions and usage guidelines for tabulated interactions.

          For questions regarding this script, contact info\@smog-server.org              
*****************************************************************************************
EOT

sub tablequit
{
	print "\n\nERROR: @_\n\n\t!!!!!TABLE NOT GENERATED!!!!!\n\n";
	exit;
}
# Brief description 
# prefactor is a combination of several terms.
# the DH potential that we want to use is
# U=K_Coulomb*B(kappa) Sum {q_i*q_j*exp(-kappa*r_ij)/(epsilon*r_ij)}
# K_Coulomb=1/(4*pi*epsilon_{0})=~332 kcal*mol^-1 (Angstroms, elemetary charge units e, will have to divide by 10 for Gromacs units in nm)
# for dilute systems, B(kappa)~1
# Gromacs automatically multiplies by an 'electric conversion factor,' 
#   equal to 138.935485. We want to undo that, hence the division by 138.
if (scalar(@ARGV) != 7 ){
 tablequit("Incorrect number of arguments.\n\nUsage: smog_tablegen <M> <N> <ion conc.> <elec. switch dist.> <elec. truncate dist.> <table length> <output name>");
}

my $prefactor=332.0/138.935485;
my $exponent2=$ARGV[0];
my $exponent1=$ARGV[1];
unless($exponent1 =~ /^\d+$/ and $exponent2 =~ /^\d+$/){
 tablequit("N and M must be integers");
}

if($exponent2 >= $exponent1){
 tablequit ("For consistency with smog2, only M < N is supported");
}

# molar concentration of monovalent ions.
my $conc=$ARGV[2];
# kappa is the inverse screening length.  Units of nm^-1.
my $kappa=3.2*sqrt($conc);


# switching function: This ensures that the force and potential go continuously
# to zero at the cut-off distance (rc), and it starts switching at rc1.
my $r1=$ARGV[3];
my $rc=$ARGV[4];
#what is the length of the table(in nm)?
my $Rtable=$ARGV[5];
if($rc <= $r1 && $rc != 0){
 tablequit("switching distance must be shorter than truncated distance");
}elsif($rc < 0 || $r1 < 0){
 tablequit("switching distance and truncated distance must be greater than, or equal to, zero");
}elsif($rc>$Rtable){
 tablequit("table must extend beyond the cutoff distance");
}
 
my $outfilename=$ARGV[6];

my ($ext)=$outfilename =~ /(\.[^.]+)$/;
if($outfilename !~ /(\.[^.]+)$/){
        $outfilename = $outfilename . ".xvg";
}elsif($ext ne ".xvg"){
        $outfilename = $outfilename . ".xvg";
}

print "\n\nWill write table to file $outfilename\n\n";

open(OUTFILE,">$outfilename") or die "Can\'t open $outfilename for writing.\n";

# what is the spacing of the table (in nm)? 
my $DR=0.002;

sub V
{
 my ($kappa, $R)=@_;
 my $F=exp(-$kappa*$R)/$R;
 return $F;
}

sub Vprime
{
 my ($kappa, $R)=@_;
 my $F=-$kappa*exp(-$kappa*$R)/$R-exp(-$kappa*$R)/($R*$R);
 return $F;
}


# calculate the parameters for the switching function.
my $M;
my $R;
my $N;
my $O;
my $S;
my $T;
my $A;
my $B;
if($rc >0){
 $M=V($kappa,$rc);
 $M=-$M;
 $N=($rc-$r1)**2;
 $O=($rc-$r1)**3;
 $R=Vprime($kappa,$rc);
 $R=-$R;
 $S=2*($rc-$r1);
 $T=3*($rc-$r1)**2;
 $A=(($M/$O)-($R/$T))/(($N/$O)-($S/$T));
 $B=$R/$T-$A*$S/$T;
}else{
 $A=1;
 $B=1;
}
# generate the table file. 

my $Ntable=int($Rtable/$DR);
my $VE;my $VpE;

print OUTFILE<<EOF;
# Force table for use with structure-based SMOG models
# Potential of the form U=q_i*q_j*exp(-kappa*r)/r+A/r^N-B/r^M
# kappa=$kappa
# N=$exponent1
# M=$exponent2
# For electrostatics:
#    	switching distance=$r1
#	cutoff distance=$rc
#	ion concetration=$conc
EOF


#first few lines have numbers too big for gromacs to read
#will give segfaults if we don't zero them out
for(my $i=0; $i<8;$i++){
$R=$i*$DR;
print OUTFILE "$R 0 0 0.0 0.0 0.0 0.0\n";
}

for(my $i=8; $i<$Ntable;$i++){
$R=$i*$DR;

 my $R1=-1/$R**$exponent2;
 my $R2=-$exponent2/$R**($exponent2+1);
 my $R3=1/$R**$exponent1;
 my $R4=$exponent1/$R**($exponent1+1);
 if( $R < $r1 && $rc !=0){
  $VE=V($kappa, $R);
  $VE=$prefactor*$VE/10.0;
  $VpE=Vprime($kappa, $R);
  $VpE=-$prefactor*$VpE/10.0;
 print OUTFILE "$R $VE $VpE $R1 $R2 $R3 $R4\n";
 }elsif($R >= $r1 && $R<=$rc){
  $VE=V($kappa, $R)+$A*($R-$r1)**2+$B*($R-$r1)**3;
  $VE=$prefactor*$VE/10.0;
  $VpE=Vprime($kappa, $R)+$A*2*($R-$r1)+$B*3*($R-$r1)**2;
  $VpE=-$prefactor*$VpE/10.0;
   print OUTFILE "$R $VE $VpE $R1 $R2 $R3 $R4\n";
 }else{
  print OUTFILE "$R 0.0 0.0 $R1 $R2 $R3 $R4\n"
 }
}
#last line can't have a newline!
$R=$Ntable*$DR;

my $R1=-1/$R**$exponent2;
my $R2=-$exponent2/$R**($exponent2+1);
my $R3=1/$R**$exponent1;
my $R4=$exponent1/$R**($exponent1+1);
print OUTFILE "$R 0.0 0.0 $R1 $R2 $R3 $R4 "


