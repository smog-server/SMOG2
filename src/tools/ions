#########################################################################################
#                          Structure-based Model (SMOG) software
#    This package is the product of contributions from a number of people, including:
#            Jeffrey Noel, Mariana Levi, Antonio Oliveira, VinÃ­cius Contessoto,
#             Mohit Raghunathan, Joyce Yang, Prasad Bandarkar, Udayan Mohanty,
#                          Ailun Wang, Heiko Lammert, Ryan Hayes,
#                               Jose Onuchic & Paul Whitford
#
#            Copyright (c) 2015,2016,2018,2021, The SMOG development team at
#                        Rice University and Northeastern University
#
#          SMOG 2, Shadow and OpenSMOG are available at http://smog-server.org
#
#          You can direct questions to info@smog-server.org, or the smog-users forum,
#          which you can find at https://mailman.rice.edu/mailman/listinfo/smog-users
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#########################################################################################

###########################
# ions is used for smog_ions
###########################

use strict;
use warnings FATAL => 'all';
use Getopt::Long;
use smog_common;
use OpenSMOG;
use XML::Simple qw(:strict);
use Scalar::Util qw(looks_like_number);
our @ISA = 'Exporter';
our @EXPORT = qw(%supported_directives);
my $inputArguments=join(' ',@ARGV);
my $xml = new XML::Simple;
my $tmpstring = <<EOT;

                                      smog_ions

      	smog_ions is part of the SMOG 2 distribution, available at smog-server.org

        This tool uses a SMOG .top and .gro file, along command line arguments to 
	add ions to a SMOG model. Note, this does not change the underlying model, it 
 	only adds ions to the gro and top files.

        For usage information, issue flag -help, or see the SMOG manual.

        For questions regarding this script, contact info\@smog-server.org

EOT
my $wide=88;
printdashed($wide);
printcenter($wide,$tmpstring);
printdashed($wide);


# in supported_directives, a value of 1 means is it required, 0 is not supported. >1 means optional
our %supported_directives = ( 'defaults' => '1',
        'atomtypes' => '1',
        'moleculetype' => '1',
        'nonbond_params' => '2',
        'atoms' => '1',
        'bonds' => '1',
        'angles' => '1',
        'dihedrals' => '1',
        'pairs' => '1',
        'exclusions' => '1',
        'system' => '1',
        'molecules' => '1',
        'position_restraints' => '0'
        );

my $inputTOP="smog.top";
my $inputGRO="smog.gro";
my $outputtop="smog.ions.top";
my $outputgro="smog.ions.gro";
my $addnum=0;
my $mindist=0.5;
my $addname;
my $addC12;
my $addC6;
my $addcharge;
my $addmass;
my $template;
my $help;
my @grobox;
my $OpenSMOG;
my $AddCustomParmsToXML;
my $OpenSMOGout;
quit_init();
note_init();
checkForModules();

usage() if (@ARGV < 1 || !GetOptions('help|?' => \$help, 'f=s' => \$inputTOP, 'g=s' => \$inputGRO,  
        'of=s' => \$outputtop, 'og=s' => \$outputgro, 'ionn=i' => \$addnum, 'ionm=f' => \$addmass, 'ionC12=f' => \$addC12, 't=s' => \$template,'ionC6=f' => \$addC6, 'ionnm=s' => \$addname, 'ionq=f' => \$addcharge,  'mindist=f' => \$mindist,  'OpenSMOG=s' => \$OpenSMOG, 'OpenSMOGout=s' => \$OpenSMOGout,  'warn=i' => \$maxwarn, 
        '<>' => \&usage)
        or defined $help); 

if($inputGRO eq $outputgro){
	smog_quit("Input and output gro files can not have the same name: $outputgro");
}

if($inputTOP eq $outputtop){
	smog_quit("Input and output top files can not have the same name: $outputtop");
}

foreach my $filen($outputtop, $outputgro){
	checkalreadyexists($filen);
}

if(defined $OpenSMOG && !defined $OpenSMOGout){
	smog_quit("when using -OpenSMOG, you must specify an output file name with -OpenSMOGout"); 
}

if(defined $OpenSMOG && !defined $template){
	smog_quit("when using -OpenSMOG, you must specify a template directory with -t."); 
}

if(!defined $OpenSMOG && defined $OpenSMOGout){
	smog_quit("Can not use -OpenSMOGout setting if -OpenSMOG is not also used."); 
}
if(defined $OpenSMOG && ! -e $OpenSMOG){
	smog_quit("Can not open file $OpenSMOG for reading.");
}
if(defined $OpenSMOGout){
	checkalreadyexists($OpenSMOGout);
}

if(!defined $addname){
	smog_quit("Please indicate which ion species to add with the -ionnm option"); 
}
if($addnum <1){
	smog_quit("At least one ion must be added.");
}

if(defined $template){
	if(defined $addmass || defined $addcharge || defined $addC12 || defined $addC6){
		smog_quit("When using the -t option, you may not provide the following additional flags: -ionC12, -ionC6, -ionq, -ionm.");
	}

	# going to look for the sif and determine if nonbond information should
	# be added to the top (i.e. standard gromacs-formatted interactions) or
	# if they should be added to the OpenSMOG XML file.
	if(defined $OpenSMOG){
		my $siffile=findsif($template);
	        my $data = $xml->XMLin($siffile,KeyAttr => ['name'],ForceArray=>1);
		my ($found,$parmarr)=GetCustomParms($data);
		if($found!=0){
			$AddCustomParmsToXML=$parmarr;
			print "Custom nonbond function found in templates.\n";
			print "Will add ion nonbond terms to XML file, if needed.\n";
		}
	}

	# read the definitions for ions from ions.def
	my $ionfile=finddefs($template);
	print "\nWill read definitions of ion parameters in $ionfile\n";
	open(IONFILE,"$ionfile") or smog_quit("Can\'t open $ionfile");
	my $ionmatch=0;
	while(<IONFILE>){
		my $LINE=$_;
		chomp($LINE);
		my ($data,$comment)=checkcomment($LINE);
		if($data eq ""){
			#skip comment lines; 
			next;
		}
		$data = trim($data);
		# check that nonbonded params are only added if the atom types are present
		my @tarray=split(/\s+/,$data);
		if($#tarray != 4){
			smog_quit("ions.def format error.  Expected: name, mass, charge, C12, C6.\n Found\n $data");
		}else{
			if($tarray[0] eq "$addname"){
				if($ionmatch >0){
					smog_quit("Found multiple entries for $addname in ions.def file");
				}
				# found the ion in the def file
				$ionmatch++;
				$addmass=$tarray[1];
				$addcharge=$tarray[2];
				$addC12=$tarray[3];
				$addC6=$tarray[4];
				if(!looks_like_number($addmass)){
					smog_quit("value of mass ($addmass) is not numeric.");
				}elsif($addmass<=0){
					smog_quit("mass must be positive.");
				}
				if(!looks_like_number($addcharge)){
					smog_quit("value of charge ($addcharge) is not numeric.");
				}
				if(!looks_like_number($addC12)){
					smog_quit("value of C12 ($addC12) is not numeric.");
				}
				if(!looks_like_number($addC6)){
					smog_quit("value of C6 ($addC6) is not numeric.");
				}
			}
		}
	}
	if($ionmatch !=1){
		smog_quit("Could not find $addname in ions.def file");
	}
	close(IONFILE);
}else{
	if(!defined $addmass){
		smog_quit("mass of ion not defined.");
	}
	if(!defined $addcharge){
		smog_quit("charge of ion must be provided on command line.");
	}
	if(!defined $addC12){
		smog_quit("C12 parameter of ion must be provided on command line.");
	}
	if(!defined $addC6){
		$addC6=0;
	}
	if(length($addname) > 5){
		smog_quit("Ion name $addname too long. Maximum of 5 characters allowed.");
	}
}
if($addC12<=0){
	smog_quit("C12 must be positive.");
}

if($addC6<0){
	smog_quit("C6 can not be negative.");
}

warninfo();

#check and add file name extensions, if missing
$outputgro=checksuffix($outputgro,".gro");
$outputtop=checksuffix($outputtop,".top");

print "\nWill add ions to $inputTOP and $inputGRO\n";
print "Will try to add $addnum $addname ions with charge $addcharge and mass $addmass\n";
print "Will use C12=$addC12 E*nm^12 and C6=$addC6 E*nm^6\n";
print "Will place ions at least $mindist nm from the existing system\n";
print "Will write the new force field and configuration to $outputtop and $outputgro\n\n"; 

$mindist*=2;

### make a new gro file 

open(GROFILE,"$inputGRO") or smog_quit("Can\'t open GRO file $inputGRO");
my $groheader=<GROFILE>;
chomp($groheader);

my $TMP=<GROFILE>;
chomp($TMP);
$TMP =~ s/\t/ /g; 
$TMP = trim($TMP);
$TMP =~ s/ +/ /g;
my @A=split(/\s+/,$TMP);
my $NATOMS=$A[0];
my @GRODATA;
my @X;
my @Y;
my @Z;

unless($NATOMS =~ m/^\d+/){smog_quit("Number of atoms on line 2 of gro file ($NATOMS), is not an integer.")}

for(my $I=0;$I<$NATOMS;$I++){
	# store gro data
	my $LINE=<GROFILE>;
	chomp($LINE);
	$GRODATA[$I+1]=$LINE;
}
my $grodim=<GROFILE>;
chomp($grodim);
$grodim =~ s/^\s+//g; 
my @tmpbox = split(/\s+/,$grodim);
# if we have a rectangular box, then set the additional box vector components to zero;

if($#tmpbox == 2){
	print "Rectangular box detected\n";
}elsif($#tmpbox == 8){
	print "Triclinic  box detected\n";
}else{
	smog_quit("Wrong number of box vectors provided: unrecognized dimensions");
}

for(my $I=0;$I<9;$I++){
	if(!defined $tmpbox[$I]){
		$tmpbox[$I]=0;
	}
}
# reorder the indices to be more logical
$grobox[0] =$tmpbox[0];
$grobox[4] =$tmpbox[1];
$grobox[8] =$tmpbox[2];
$grobox[1] =$tmpbox[3];
$grobox[2] =$tmpbox[4];
$grobox[3] =$tmpbox[5];
$grobox[5] =$tmpbox[6];
$grobox[6] =$tmpbox[7];
$grobox[7] =$tmpbox[8];

print "box vectors:\n";
for (my $I=0;$I<9;$I++){
	print "\t$grobox[$I]";
	if(($I+1) % 3 ==0){
		print "\n";
	}
}
print "\n";

close(GROFILE);

if(-e $outputgro){smog_quit("$outputgro already exists.")};
open(GROFILE,">$outputgro") or smog_quit("Can\'t open output GRO file $outputgro");
print GROFILE "$groheader. Note: ions added with smog_ions (version $VERSION)\n";
$NATOMS+=$addnum;
print GROFILE "$NATOMS\n";
for(my $I=1;$I<=$NATOMS-$addnum;$I++){

	my $XT=substr($GRODATA[$I],20,8);
	my $YT=substr($GRODATA[$I],28,8);
	my $ZT=substr($GRODATA[$I],36,8);

	while($ZT > $grobox[8]){
                $XT-=$grobox[6];
                $YT-=$grobox[7];
                $ZT-=$grobox[8];
	}
	while($ZT <= 0){
                $XT+=$grobox[6];
                $YT+=$grobox[7];
                $ZT+=$grobox[8];
	}
	while($YT > $grobox[4]){
                $XT-=$grobox[3];
                $YT-=$grobox[4];
                $ZT-=$grobox[5];
	}
	while($YT <= 0){
                $XT+=$grobox[3];
                $YT+=$grobox[4];
                $ZT+=$grobox[5];
	}
	while($XT > $grobox[0]){
                $XT-=$grobox[0];
                $YT-=$grobox[1];
                $ZT-=$grobox[2];
	}
	while($XT <= 0){
                $XT+=$grobox[0];
                $YT+=$grobox[1];
                $ZT+=$grobox[2];
	}

	substr($GRODATA[$I],20,8)=sprintf("%8.3f", $XT);
	substr($GRODATA[$I],28,8)=sprintf("%8.3f", $YT);
	substr($GRODATA[$I],36,8)=sprintf("%8.3f", $ZT);

	print GROFILE "$GRODATA[$I]\n";
	$X[$I]=$XT;
	$Y[$I]=$YT;
	$Z[$I]=$ZT;
}
print "preparing to add ions to gro file...\n";
my $XTT;
my $YTT;
my $ZTT;
my $XT;
my $YT;
my $ZT;
my $added=1;
# set up grid parameters for the system.
my %GRIDATOMS;
my @UNIT0=($grobox[0],$grobox[1],$grobox[2]);
my @UNIT1=($grobox[3],$grobox[4],$grobox[5]);
my @UNIT2=($grobox[6],$grobox[7],$grobox[8]);
my $LENGTH0;
my $LENGTH1;
my $LENGTH2;
$LENGTH0=sqrt($UNIT0[0]*$UNIT0[0]+$UNIT0[1]*$UNIT0[1]+$UNIT0[2]*$UNIT0[2]);
$LENGTH1=sqrt($UNIT1[0]*$UNIT1[0]+$UNIT1[1]*$UNIT1[1]+$UNIT1[2]*$UNIT1[2]);
$LENGTH2=sqrt($UNIT2[0]*$UNIT2[0]+$UNIT2[1]*$UNIT2[1]+$UNIT2[2]*$UNIT2[2]);
my $N0=int($LENGTH0/$mindist);
my $gridwidth0=$LENGTH0/$N0;
my $N1=int($LENGTH1/$mindist);
my $gridwidth1=$LENGTH1/$N1;
my $N2=int($LENGTH2/$mindist);
my $gridwidth2=$LENGTH2/$N2;

if($NATOMS > 0.5*($N0+1)*($N1+1)*($N2+1)){
	print "NOTE: Number of total atoms exceeds one half of all grid cells.  Placing ions may be slow.\n"; 
}elsif($NATOMS > ($N0+1)*($N1+1)*($N2+1)){
	smog_quit("Number of total atoms exceeds number of grid cells. Trying smaller value of -mindist may help.")
}


@UNIT0=($UNIT0[0]/$LENGTH0,$UNIT0[1]/$LENGTH0,$UNIT0[2]/$LENGTH0);
@UNIT1=($UNIT1[0]/$LENGTH1,$UNIT1[1]/$LENGTH1,$UNIT1[2]/$LENGTH1);
@UNIT2=($UNIT2[0]/$LENGTH2,$UNIT2[1]/$LENGTH2,$UNIT2[2]/$LENGTH2);

# grid the current atoms
for(my $I=1;$I<=$NATOMS-$addnum;$I++){
	my ($C0,$C1,$C2)=getcell(\@UNIT0,\@UNIT1,\@UNIT2,$gridwidth0,$gridwidth1,$gridwidth2,$X[$I],$Y[$I],$Z[$I]);
	$GRIDATOMS{"$C0-$C1-$C2"}=1;
}
print "adding ions to gro file...\n";
for(my $I=$NATOMS-$addnum+1;$I<=$NATOMS;$I++){
	$added++;
	my $mindistt=0;
	my $attempt=0;
	my $CELL0;
	my $CELL1;
	my $CELL2;
	until($mindistt == 1){
		$attempt++;
		if($attempt ==1000){
			smog_quit("Tried 1000 times to add ion number $added. Giving up.");
		}

		# check the adjacent cells, account for PBCs
		$CELL0=int(rand()*$N0);
		$CELL1=int(rand()*$N1);
		$CELL2=int(rand()*$N2);
		if(!defined $GRIDATOMS{"$CELL0-$CELL1-$CELL2"}){
			$mindistt=1;
		}
	}

	# if kept, then add to the hash of gridded atoms

	my ($XTT,$YTT,$ZTT)=getcellcenter(\@UNIT0,\@UNIT1,\@UNIT2,$gridwidth0,$gridwidth1,$gridwidth2,$CELL0,$CELL1,$CELL2);
	$GRIDATOMS{"$CELL0-$CELL1-$CELL2"}=1;
	my $J = $I % 100000;	
	printf GROFILE "%5i%-5s%5s%5i%8.3f%8.3f%8.3f\n", $J,$addname, $addname, $J, $XTT, $YTT, $ZTT;

}

### end of adding ions to the gro

print GROFILE "$grodim\n";

##******************* END OF GRO MODIFICATIONS**************************

print "adding ions to top file...\n";

open(FILE, "$inputTOP") or smog_quit("Can not open $inputTOP"); 

if(-e $outputtop){smog_quit("$outputtop already exists.")}
open(TOPOUT,">$outputtop") or smog_quit("Can\'t open $outputtop for writing");

my $NBbuffer="";
my $NBPpresent=0;
my %typesinsystem;
my %seenmoltype;
my $alreadypresent=0;

print TOPOUT "; This is a top file generated with smog_ions (version $VERSION), using the command:\n;";
print TOPOUT "   smog_ions $inputArguments\n";
my $date=printhostdate();
print TOPOUT "$date";
print TOPOUT "; any comments below were from the input top file\n\n";
while (<FILE>){
	my $LINE = $_;
	my $LINEORIG=$LINE;
	chomp($LINE);
	my ($data,$comment)=checkcomment($LINE);
	if(checkforinclude($LINE,$data,*TOPOUT)){next;};

	# check if we hit the atomtypes.  if we do, then add the atomtype.
	if($data eq ""){
		print TOPOUT "$comment\n"; 
		next;
	}
	my @TMP=split(/ /,$data);
	if($TMP[0] eq "[" and $TMP[1] eq "atomtypes"){
		print TOPOUT "$data\n"; 
	
		$LINE = <FILE>;
		$LINEORIG=$LINE;
		chomp($LINE);
		($data,$comment)=checkcomment($LINE);
		if(checkforinclude($LINE,$data,*TOPOUT)){next;};
		# read the current list of atomtypes
		until(($data eq "" and $comment eq "") or substr($data,0,1) eq "[" ){
			$data =~ s/ /\t/g;
			print TOPOUT "$data$comment\n"; 
			$LINE = <FILE>;
			$LINEORIG=$LINE;
			if(!defined $LINE){$data="";$comment="";next;}
			chomp($LINE);
			($data,$comment)=checkcomment($LINE);
			if(checkforinclude($LINE,$data,*TOPOUT)){next;};
			if($data eq ""){next;}
			my @D=split(/\s+/,$data);
			$typesinsystem{$D[0]}=1;
			if($D[0] eq "$addname"){
				$alreadypresent++;
			}
		}
		if($alreadypresent==0){
			print "atomtype $addname not found in .top file. Will add parameters to .top file\n";
			print TOPOUT "$addname\t$addmass\t$addcharge\tA\t$addC6\t$addC12\n";
		}elsif($alreadypresent==1){
			print "\nNote: atomtype $addname already defined in .top file. Will not overwrite parameters\n";
		}else{
			smog_quit("atomtype $addname already defined multiple times in top file.");
		}

		# append the new atomtype
		$LINEORIG=$LINE;
		my $extrafile = "";
		my $extrasexists=0;
		if(defined $template){
        		opendir(my $folder,$template);
        		while(my $file = readdir($folder)){
        		        if($file =~ m/\.extras$/ || $file =~ m/^extras$/) {
        		                $extrasexists++;
        		                $extrafile = "$template/$file";
					if($extrasexists>1){
						smog_quit("More than one extras file found in $template");
					}
        		        }
        		}
			closedir($folder);
		}
		if($alreadypresent==1){
			# since we have already defined the atomtype, we will not check for anything from extras
			if(defined $template && $extrasexists >0){
				print "\nNote: Since $addname was defined in the original top file, we will not try to read $extrafile.\n";
			}
		}else{
			# if -t is used and there is an extras file, read it
			if(defined $template){
		        	#my $extrafile="$template/extras";
				if($extrasexists !=1){
					smog_quit("No extras file found.  This is required when adding a new type of ion");
					
				}
				print "Will check if we should add any nonbond_params from extras file $extrafile";
				open(EXTRA,"$extrafile") or smog_quit("Unable to open $extrafile");
				while(my $line = <EXTRA>)
				{
					chomp($line);
					my ($A,$B)=checkcomment($line);
					if($A eq ""){next;}  # skip the line if it is only a comment
				    	my @tokens = split('<',$line);
					my $directive = trim($tokens[0]);
					my $stuff = trim($tokens[1]);
					# check that nonbonded params are only added if the atom types are present
					if($directive eq "nonbond_params"){
						my @tarray=split(/\s+/,$stuff);
						if((exists $typesinsystem{$tarray[0]} && $tarray[1] eq "$addname") || (exists $typesinsystem{$tarray[1]} && $tarray[0] eq "$addname") || ($tarray[0] eq "$addname" && $tarray[1] eq "$addname") ){
							$stuff =~ s/\s+/\t/g;
							$NBbuffer .= "$stuff\n";
						}	
					}
				}
			}
		}
		print TOPOUT "\n";
	}
	if(!defined $TMP[0]){
		$TMP[0]="";
	}

	if($TMP[0] eq "[" and $TMP[1] eq "nonbond_params"){
		$NBPpresent=1;
		$data =~ s/\s+/\t/g;
		print TOPOUT "$data\n"; 
	
		$LINE = <FILE>;
		$LINEORIG=$LINE;
		chomp($LINE);
		($data,$comment)=checkcomment($LINE);
		if(checkforinclude($LINE,$data,*TOPOUT)){next;};
		# read the current list of nonbond_params
		until(($data eq "" and $comment eq "") or substr($data,0,1) eq "[" ){
			$data =~ s/\s+/\t/g;
			print TOPOUT "$data$comment\n"; 
			$LINE = <FILE>;
			$LINEORIG=$LINE;
			if(!defined $LINE){$data="";$comment="";next;}
			chomp($LINE);
			($data,$comment)=checkcomment($LINE);
			if(checkforinclude($LINE,$data,*TOPOUT)){next;};
			if($data eq ""){next;}
		}
		if(defined $AddCustomParmsToXML){
			# add it to XML
			OpenSMOGAddNBsettoXML($OpenSMOG,$OpenSMOGout,$AddCustomParmsToXML,$NBbuffer);
		}else{
			print TOPOUT "$NBbuffer";
		}
	}

	if($TMP[0] eq "[" and $TMP[1] eq "moleculetype"){
		# if we did not find a nonbond_params, add it.
		if($NBPpresent==0 && $NBbuffer ne ""){
			if(defined $AddCustomParmsToXML){
				# add it to XML
				OpenSMOGAddNBsettoXML($OpenSMOG,$OpenSMOGout,$AddCustomParmsToXML,$NBbuffer);
			}else{
				print TOPOUT "[ nonbond_params ]\n$NBbuffer\n\n";
			}
		}


		# add a new molecule type
		if($alreadypresent == 0){
			print TOPOUT "[ moleculetype ]\n$addname 1\n\n[ atoms ]\n1 $addname 1 $addname $addname 1\n\n";
			if(exists $seenmoltype{$addname}){
				smog_quit("moleculetype $addname would be defined more than once in new top file.");
 			}
			$seenmoltype{$addname}=0;
			# since we just added it, don't add again
			$alreadypresent++;
		}
	}

	if($TMP[0] eq "[" and $TMP[1] eq "moleculetype"){
		print TOPOUT "$LINEORIG"; 

		$LINEORIG = <FILE>;
		$LINE = $LINEORIG;
		chomp($LINE);
		my ($data,$comment)=checkcomment($LINE);
		until($data ne ""){
			print TOPOUT "$LINEORIG"; 
			$LINEORIG = <FILE>;
			$LINE = $LINEORIG;
			chomp($LINE);
			($data,$comment)=checkcomment($LINE);
		} 
		$LINE =~ s/\t/ /g; 
		$LINE = trim($LINE);
		$LINE =~ s/ +/ /g;
		my @tmp2=split(/\s+/,$LINE);
		$seenmoltype{$tmp2[0]}=0;
	}

	if($TMP[0] eq "[" and $TMP[1] eq "molecules"){
		print TOPOUT "$LINEORIG"; 
	
		$LINE = <FILE>;
		$LINEORIG=$LINE;
		chomp($LINE);
		$LINE =~ s/\t/ /g; 
		$LINE = trim($LINE);
		$LINE =~ s/ +/ /g;
		until($LINE eq ""){
			print TOPOUT "$LINEORIG"; 
			$LINE = <FILE>;
			if(!defined $LINE){$LINE="";$LINEORIG="";}
			$LINEORIG=$LINE;
			chomp($LINE);
			$LINE =~ s/\t/ /g; 
			$LINE = trim($LINE);
			$LINE =~ s/ +/ /g;
		}
		print TOPOUT "$addname $addnum\n";

	}

	print TOPOUT "$LINEORIG"; 
	# end of atomtypes continue
}
warnsummary();
print "\n\tSUCCESS: Added $addnum $addname ions.\n\n";
exit(0);


###########SUBROUTINES##############
sub getcell
{
	my ($UNIT0,$UNIT1,$UNIT2,$width0,$width1,$width2,$Xt,$Yt,$Zt)=@_;
	my @UNIT0=@{$UNIT0};
	my @UNIT1=@{$UNIT1};
	my @UNIT2=@{$UNIT2};
	# calculate and subtract projection along c vector
	my $proj=$UNIT2[0]*$Xt+$UNIT2[1]*$Yt+$UNIT2[2]*$Zt;
	my $C2=int($proj/$width2);
	$Xt-=$UNIT2[0]*$proj;
	$Yt-=$UNIT2[1]*$proj;
	$Zt-=$UNIT2[2]*$proj;
	$proj=$UNIT1[0]*$Xt+$UNIT1[1]*$Yt+$UNIT1[2]*$Zt;
	my $C1=int($proj/$width1);
	$Xt-=$UNIT1[0]*$proj;
	$Yt-=$UNIT1[1]*$proj;
	$Zt-=$UNIT1[2]*$proj;
	$proj=$UNIT0[0]*$Xt+$UNIT0[1]*$Yt+$UNIT0[2]*$Zt;
	my $C0=int($proj/$width0);

	return ($C0,$C1,$C2);

}

sub getcellcenter
{
	my ($UNIT0,$UNIT1,$UNIT2,$width0,$width1,$width2,$N0,$N1,$N2)=@_;
	my @UNIT0=@{$UNIT0};
	my @UNIT1=@{$UNIT1};
	my @UNIT2=@{$UNIT2};
	my $Xcenter=0;
	my $Ycenter=0;
	my $Zcenter=0;
	$Xcenter+=$UNIT0[0]*($N0+0.5)*$width0;
	$Ycenter+=$UNIT0[1]*($N0+0.5)*$width0;
	$Zcenter+=$UNIT0[2]*($N0+0.5)*$width0;
	$Xcenter+=$UNIT1[0]*($N1+0.5)*$width1;
	$Ycenter+=$UNIT1[1]*($N1+0.5)*$width1;
	$Zcenter+=$UNIT1[2]*($N1+0.5)*$width1;
	$Xcenter+=$UNIT2[0]*($N2+0.5)*$width2;
	$Ycenter+=$UNIT2[1]*($N2+0.5)*$width2;
	$Zcenter+=$UNIT2[2]*($N2+0.5)*$width2;

	return ($Xcenter,$Ycenter,$Zcenter);

}

sub finddefs
{
	my ($folderName)=@_;
	my $defsexists=0;
	my $defsfile;
        opendir(my $folder,$folderName);
	while(my $file = readdir($folder)){
		if($file =~ m/\.ions\.def$/ || $file =~ m/^ions\.def$/) {
			$defsexists++;
			$defsfile = "$folderName/$file";
			next;
		}
	}
	if($defsexists ==0){
		smog_quit ("No ion definition file found in directory $folderName");
	}
	if($defsexists >1){
		smog_quit ("Found multiple ion definition files in directory $folderName");
	}
	return $defsfile;

}

sub findsif
{
	my ($folderName)=@_;
	my $sifexists=0;
	my $siffile;
        opendir(my $folder,$folderName);
	while(my $file = readdir($folder)){
		if($file =~ m/\.sif$/) {
			$sifexists++;
			$siffile = "$folderName/$file";
			next;
		}
	}
	if($sifexists ==0){
		smog_quit ("No sif file found in directory $folderName");
	}
	if($sifexists >1){
		smog_quit ("Found multiple sif files in directory $folderName");
	}
	return $siffile;

}



sub usage
{
  print <<EOT;

usage: smog_ions ... options

   Required flags
	-ionnm  <string>        : name of ion to be added to the system
	-ionn   <integer>       : number of ions to add
	-ionq   <float>         : charge of ions
	-ionm   <float>         : mass of ions
	-ionC12 <float>         : C12 excluded-volume parameter for added ions
   Optional settings 
	-t <string>	        : optional template directory to read ion definitions
                                    This is required if using OpenSMOG files
	-f [smog.top]           : input SMOG force field file
	-g [smog.gro]           : input SMOG configuration file
	-of [smog.ions.top]     : output SMOG force field file for smog-ions system
	-og [smog.ions.gro]     : output SMOG configuration file for smog-ions system
	-mindist [0.5]          : the minimium distance (nm) between an added ion and 
                                    any other atom in the system
	-ionC6 [0.0]	        : C6 parameter for added ions
	-OpenSMOG <xml file>    : also process an OpenSMOG xml file. This file is generated 
                                    by smog2 if the -OpenSMOG option was used.
	-OpenSMOGout <xml file> : output file name for processed OpenSMOG xml file
	-warn [0]	        : convert first N errors into warnings
	-help 		        : show options 
EOT
  if ( @_ ){
   smog_quit("Command-line argument \"@_\" not recognized.");
  }else{
   exit(1);
  }
}




