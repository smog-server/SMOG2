use strict;
use warnings FATAL => 'all';
use smog_common;
use Getopt::Long;
## VARS: ##
my %map;
my %altname;
my %rename;
my %ignorename;
my $rows;
my $atomCount;
my $isFirst;
my $isLast;
my $resInd;
my $chainName;
my $resName;
my @residue;
my @pArr;
my $loopInd;
my $prevResTypeRNA;
my $outputPDB="adjusted.pdb";
my $inputPDB;
my $insertTER;
my $subALA;
my $mapFile;
my $default;
my $large;
my $sort;
my $renumber;
my $PDBresnum;
my $removeH;
my $mapOption;
my $legacymatch;
my $help;
my $inputArguments=join(' ',@ARGV);

my %supported_residue_tags = ( 'last' => '1','first' => '1');

## MODULE HEADERS ##

# this is called after all subroutines are read in
my $tmpstring = <<"EOT";

                                    smog_adjustPDB                                   

    smog_adjustPDB is part of the SMOG 2 distribution, available at smog-server.org     

    This tool will renumber the atoms in each chain, and modify the names of terminal
        residues, so that they are compatible with the definitions used by SMOG 2

                       See the SMOG manual for usage guidelines.

            For questions regarding this script, contact info\@smog-server.org              
EOT
	
my $wide=88;
printdashed($wide);
printcenter($wide,$tmpstring);
printdashed($wide);

quit_init();
note_init();
checkForModules();

usage() if ( !GetOptions('help|?' => \$help, 'o=s' => \$outputPDB, 'i=s' => \$inputPDB, 'map=s' => \$mapFile, 'warn=i' => \$maxwarn ,'legacy' => \$legacymatch, 'renumber' => \$renumber, 'PDBresnum' => \$PDBresnum,'insertTER' => \$insertTER, 'subALA' => \$subALA,  'removeH' => \$removeH, 'large' => \$large, 'sort' => \$sort,  '<>' => \&usage) or defined $help); 

warninfo();


if(!defined $inputPDB){
	smog_quit("No input PDB file name given.");
}

if($subALA && ! $legacymatch){
	smog_quit("-subALA is only supported with -legacy matching");
}

$outputPDB=checksuffix($outputPDB,".pdb");
$inputPDB=checksuffix($inputPDB,".pdb");

if($inputPDB eq $outputPDB){
	smog_quit("Input and output PDB files can not have the same name: $outputPDB");
}

if(defined $renumber && defined $insertTER){
	smog_quit("Simultaneous use of -renumber and -insertTER not supported");
}

if(defined $renumber && defined $PDBresnum){
	smog_quit("Simultaneous use of -renumber and -PDBresnum not supported");
}

if(defined $large && defined $PDBresnum){
	smog_quit("Simultaneous use of -large and -PDBresnum not supported");
}

if (defined $renumber){
	smog_note("The flag -renumber was selected. Will assign consecutive residue numbering within each chain.");
}

if (defined $sort){
	smog_note("The flag -sort was selected. Will order atoms in each residue by name.");
}

if (defined $removeH){
	smog_note("The flag -removeH was selected. Will remove all H atoms.");
}

if (defined $PDBresnum){
	smog_note("The flag -PDBresnum. Will preserve original residue numbers from PDB.\nOutput file will probably not be useful for simulations, but may be helpful for analysis.");
}

if (defined $insertTER){
	smog_note("The flag -insertTER was selected. Will insert TER lines between non-consecutive residue numbers.");
}

if(!defined $inputPDB){
	smog_quit("No input PDB was specified. Use -i to specify your input pdb file.");
}else{
	open(OLDPDB,"$inputPDB") or smog_quit("Can't open PDB file $inputPDB.");
	print "\nWill reformat the PDB file: $inputPDB\n\n";	
}

if (defined $large){
	&InitLargeBase;
}

if (defined $mapFile){
		$mapOption = $mapFile;
}else{
	$default=0;
	print "Will use the default map file for list of residue names.\n";
	if(!exists $ENV{"SMOG_PATH"}){
        smog_quit("Environmental Variable SMOG_PATH not set. You may need to run the configure.smog2 script.\n");
	}
	if (defined $legacymatch) {
		$mapOption = "$ENV{SMOG_PATH}/share/mapfiles/sbmMap";
	} else {
		$mapOption = "$ENV{SMOG_PATH}/share/mapfiles/sbmMapExact";
	}	
}

foreach my $filen ($outputPDB){
	checkalreadyexists($filen);
}

open(NEWPDB,">$outputPDB.adjustPDB.partial") or smog_quit("Can't open the output PDB file.");
print "New file will be written: $outputPDB\n\n";

readmap();	
adjustInputFile($subALA);
warnsummary();
# since we completed without an error, save the final file.
`mv $outputPDB.adjustPDB.partial $outputPDB`;
print "\n\tAdjustment of PDB is complete.\n\n";

#########SUBROUTINES#########

sub usage
{

print <<EOS;
usage: smog_adjustPDB .. options ..

  Options
	-i <filename>           : input PDB to adjust to smog2 format
	-map <filename>         : specify a user-defined mapping file
	-legacy                 : use legacy (version < 2.3) non-matching routine 
                                     for mapping name residues. 
                                     Must be used in conjunction with -map
                                     Different mapping files used with -default
	-o [adjusted.pdb]       : output pdb file name
	-renumber               : ignore any residue numbering inconsistencies 
                                     and renumber residues sequentially
	-PDBresnum              : don't renumber residues. Keep original PDB numbering.
                                     can be useful for analysis
                                     output PDB probably won't be useful for smog2
	-removeH                : strip the file of any atoms that begin with "H"
	-large                  : use base-N (N>10) for indexing atom and residues
                                     Necessary if a single chain has more than 
                                     9999 residues or 99999 atoms.
	-sort                   : reorder atoms in each residue by name
	-insertTER              : insert "TER" lines between any non-consecutive 
                                     residue numbers
	-subALA                 : if a residue only has C, CA, N, O, and CB atoms, 
                                     then rename it ALA 
	-warn [0]               : convert first N errors to warnings (-1: convert 
                                     all errors) 
	-help                   : show options
EOS

  if ( @_ ){
   	smog_quit("Command-line argument \"@_\" not recognized.");
  }else{
   exit
  }
}

## Returns 1 if a residue is a RNA, else returns zero. ##
sub isRNA{
	my($resName) = @_;
	my %RNAlist=("U",1,"U5",1,"G",1,"G5",1,"A",1,"A5",1,"C",1,"C5",1,"MIA",1);
	if (exists $RNAlist{$resName}){
			return 1;
	}
	return 0;
}

sub renamesummary {
	my ($string,$chain)=@_;
	if ($string ne "") {
		print "Renamed residues/atoms in chain index $chain: $string\n";
	}
}

sub removesummary {
	my ($string,$chain)=@_;
	if($string ne ""){
		print "\nNote: The following atoms were removed from chain $chain: $string\n";
	}
}

sub adjustInputFile{
	my ($subALA)=@_;	
	# Read the molecule PDB into an array (for convenience)
	
	$rows=0;
	while(<OLDPDB>){
		my $line=$_;
		chomp($line);
		$pArr[$rows]=$line;	
		$rows++;
	}
	close OLDPDB;
	
	$isFirst = 1;
	$isLast = 0;
	$resInd = 1;
	$atomCount=0;	
	my $removestring="";	
	my $renamedstring="";
	my $firstresidue=0;
	my $lastresidue=0;
	my $lastresName="";
	my $chainindex=1;
	my $resIDorig;
	# identify all TER and END lines.
	my $k = 0;
	my %isTEREND;
	while($k<$rows){
		if ($pArr[$k] =~ m/^END/ || $pArr[$k] =~ m/^TER/){
			$isTEREND{$k}=1;
		}
		$k++;
	}

	my $hostname=`hostname`;
	chomp($hostname);
	my $date=`date`;
	chomp($date);
	print NEWPDB "COMMENT File generated with: smog_adjustPDB $inputArguments\n";
	print NEWPDB "COMMENT Generated on $date. Hostname: $hostname\n";
	if(defined $large){
		print NEWPDB "LARGE - Use large base for res/atom numbering (don\'t delete, or smog2 will crash)\n";
	}
	## Loops through all PDB rows ##
	$k = 0;
	while($k<$rows){
		my $line=$pArr[$k];	
		trim(chomp($pArr[$k]));
		
		## If end of file: ##
		if ($pArr[$k] =~ m/^END/){
			print NEWPDB "END\n";
			renamesummary($renamedstring,$chainindex);
			removesummary($removestring,$chainindex);
			$renamedstring="";
			$removestring="";
			last;
		}elsif($pArr[$k] =~ m/^TER/){
			# if the next line has a TER, or END, then don't write the current TER.
			$k++;
			if(exists $isTEREND{$k}){
				next;
			}
			print NEWPDB "TER\n";
			$atomCount=0;
			$isFirst = 1;
			$resInd = 1;
			renamesummary($renamedstring,$chainindex);
			removesummary($removestring,$chainindex);
			$renamedstring="";
			$removestring="";

			$chainindex++;

		}elsif($pArr[$k] =~ /^BOND/){
			print NEWPDB "$pArr[$k]\n";
			$k++;
			next;
			if (defined $sort || defined $renumber || defined $removeH ){
				smog_quit("Issue at line $k: BOND lines can not be used in conjunction with -removeH, -sort, or -renumber, since the new atom numbers may differ from the input file.");
			}
		}elsif ($pArr[$k] =~ /^COMMENT/){
			print NEWPDB "$pArr[$k]\n";
			$k++;
			next;
		}elsif ($pArr[$k] =~ /^ATOM/ || $pArr[$k] =~ /^HETATM/){
		## If atom line: ##

			$firstresidue++;
			my $resNum = trim(substr($pArr[$k],22,5));
			my $newResNum = $resNum;
			if($resNum =~ /^\d+$|^-\d+$/ && $lastresidue =~ /^\d+$|^-\d+$/){
				if(($resNum-$lastresidue > 1 || $resNum-$lastresidue < 0) && $firstresidue !=1){
					my $chain=substr($pArr[$k],21,1);
					if(!$renumber && !$insertTER && !$PDBresnum){
						smog_quit("Non-consecutive residue numbering detected in original PDB file at residues $lastresidue and  $resNum (chain $chain, near line $k).");
					}elsif($insertTER){
						print "Non-consecutive residue numbering detected.  -insertTER used.  TER will be inserted before:$line\n";
						print NEWPDB "TER\n";
					}
				}
			}elsif(!$renumber){
				smog_quit("Residue IDs must be positive integers. Found: $resNum.");
			}
	
			$resName = trim(substr($pArr[$k],17,4));
			my $altLoc = substr($pArr[$k],16,1);
			if ($altLoc ne " "){
				smog_quit("Issue at line $k: Alternate location indicators are not supported by SMOG.");
			}
			
			$chainName = substr($pArr[$k],21,1);
			
			## Loop through the residue ##
			$loopInd = 0;
			while ($newResNum eq $resNum){
				$atomCount++;
				my $atomCountBaseN;
				if(defined $large){
					$atomCountBaseN=BaseTentoLarge($atomCount,5);
				}else{
					if($atomCount == 100000){
						smog_quit("Too many atoms in a single chain (max of 99999).  Try -large option.");
					}	
					$atomCountBaseN=$atomCount;
				}
				## Obtain atom information ##
				my $atomName = trim(substr($pArr[$k],12,4));
				my $resNametmp = trim(substr($pArr[$k],17,4));
				if($loopInd==0){
					$lastresName=$resNametmp;
				}elsif($lastresName ne $resNametmp){
					smog_quit("Atoms within a residue have inconsistent residue names. See\n$pArr[$k]");
				}	
				$residue[$loopInd]->{"atomName"} = $atomName;
				$residue[$loopInd]->{"atomIndex"} = $atomCountBaseN;
				$residue[$loopInd]->{"x"} = substr($pArr[$k],30,8);   
				$residue[$loopInd]->{"y"} = substr($pArr[$k],38,8);  
				$residue[$loopInd]->{"z"} = substr($pArr[$k],46,8);  
				$resIDorig = substr($pArr[$k],22,5);
				$resIDorig =~ s/\s+//g;  
				
				$k++;
				
				## Check if next line is END or TER ##
				if ($k == $rows || $pArr[$k] =~ /^END/ || $pArr[$k] =~ /^TER/){
					$newResNum = "";
					$isLast = 1;
					$firstresidue=0;
				}	
				else{
					$newResNum = trim(substr($pArr[$k],22,5));	#get next residue index
					if ($newResNum eq $resNum){
						$loopInd++;
					}
				}  	
			}
			$lastresidue=$resNum;

			my $printresidue;
			my $writeResNum;

			if(defined $PDBresnum){
				# write original PDB residue number
				$writeResNum=$resNum;
			}elsif(defined $large){
				# use large base numbering
				$writeResNum=BaseTentoLarge($resInd,4);
			}else{
				# standard sequential numbering
				if($atomCount == 10000){
					smog_quit("Too many residues in a single chain (max of 9999).  Try -large option.");
				}	
				$writeResNum=$resInd;
			}

			if (defined $legacymatch) {
				# conventional head/tail adjustments
				($printresidue,$removestring)=legacymatching($resName,$writeResNum,$chainName,$isFirst,$isLast,$removestring);
			} elsif (!defined $legacymatch) {
				($printresidue,$removestring,$renamedstring)=exactmatching($k,$resName,$writeResNum,$resIDorig,$chainName,$isFirst,$isLast,$removestring,$renamedstring);
			} else {
				smog_quit("internal error 1");
			}
			print NEWPDB $printresidue;

			#LEAVE CURRENT RESIDUE AND UPDATE FLAGS#
			$isFirst = 0;
			$isLast = 0;

			$resInd++;
			$prevResTypeRNA = isRNA($resName);
			undef @residue; 

		## If the line is niether ATOM, BOND, COMMENT, TER or END - exit. ##
		}else{
			smog_quit("Issue at line $k:\n$pArr[$k]\n\t is not supported by SMOG.\n\t Lines supported: ATOM, HETATM, TER, BOND, COMMENT, END");
		}
	}
	close NEWPDB;
}

sub readmap {
	## CACHE MAP ##
	#Note: Map files has to be in format <residue> <head_name> <tail_name>
	open(MAP,$mapOption) || smog_quit("Cannot open map file $mapOption\n");
	print "Mapping file \"$mapOption\" will be read.\n\n";
	
	if (defined $legacymatch) {
		# use the old head/tail convention for renaming
		print "Will use a legacy map file\n";
		readlegacymap();
	} else {
		# rename residues based one exact matches, only
		print "Will use an exact-matching map file\n";
		readexactmap();	
	}
}

sub readlegacymap
{
	open(MAP,$mapOption) || smog_quit("Cannot open Map file $mapOption\n");
	while(my $line = <MAP>){
		## SKIP COMMENT LINE ##
		my ($A,$B)=checkcomment($line);
		if($A eq ""){next;}  # skip the line if it is only a comment
		my @entries = split(/\s+/,$A);
		#map-->residue-->{head|tail} 
		if($#entries != 2){
			my $count=$#entries+1;
			smog_quit("Looking for 3 fields in $mapOption, but found $count. Offending line:\n$line");
		}
		$map{$entries[0]}{"head"} = $entries[1];
		$map{$entries[0]}{"tail"} = $entries[2];
	}
	close MAP;
}

sub readexactmap
{
	open(MAP,$mapOption) || smog_quit("Cannot open map file $mapOption\n");
	my @content;
	my $cindex=0;
	while($content[$cindex] = <MAP>){
		## SKIP COMMENT LINE ##
		my ($A,$B)=checkcomment($content[$cindex]);
		if($A eq ""){next;}  # skip the line if it is only a comment
		my @entries = split(/\s+/,$A);
		if($entries[0] =~ /^[Ii][Gg][Nn][Oo][Rr][Ee][Rr][Ee][Ss]$/ || $entries[0] =~ /^[Rr][Ee][Nn][Aa][Mm][Ee]$/ || $entries[0] =~ /^[Rr][Ee][Ss][Ii][Dd][Uu][Ee]$/ ) {
			$cindex++;
		}else{
			smog_quit("Exact map file only supports IgnoreRes, Residue and Rename line. Offending line:\n$content[$cindex]");
		}		

	}

	# check for ignoreRes lines
	for(my $linen=0;$linen<$cindex;$linen++){
		my $line=$content[$linen];
		## SKIP COMMENT LINE ##
		my ($A,$B)=checkcomment($line);
		if($A eq ""){next;}  # skip the line if it is only a comment
		my @entries = split(/\s+/,$A);
		if($entries[0] =~ /^[Ii][Gg][Nn][Oo][Rr][Ee][Rr][Ee][Ss]$/) {
			if($#entries != 1 ){
				my $count=$#entries+1;
				smog_quit("When giving IgnoreRes in map file, must have 2 fields (IgnoreRes <RESNAME>). Offending line:\n$line");
			}
			#save with key "resname-target name"
			if(exists $ignorename{"$entries[1]"}){
				smog_quit("Repeated IgnoreRes entry in mapping file. Offending line:\n$line");
			}
			$ignorename{"$entries[1]"}=0;
			print "     Will not rename $entries[1] residues\n";
		}
	}

	# check for rename lines
	for(my $linen=0;$linen<$cindex;$linen++){
		my $line=$content[$linen];
		## SKIP COMMENT LINE ##
		my ($A,$B)=checkcomment($line);
		if($A eq ""){next;}  # skip the line if it is only a comment
		my @entries = split(/\s+/,$A);
		if($entries[0] =~ /^[Rr][Ee][Nn][Aa][Mm][Ee]$/) {
			if($#entries != 2){
				my $count=$#entries+1;
				smog_quit("When giving RENAME in map file, must have 3 fields (RENAME <ALTERNATE NAMES> <TARGET NAME>). Offending line:\n$line");
			}
				#save with key "resname-target name"
				if(exists $rename{"$entries[1]"}){
					smog_quit("Repeated rename entry in mapping file. Offending line:\n$line");
				}
				$rename{"$entries[1]"}=$entries[2];
		}
	}

	# read residue lines
	for(my $linen=0;$linen<$cindex;$linen++){
		my $line=$content[$linen];
		## SKIP COMMENT LINE ##
		my ($A,$B)=checkcomment($line);
		if($A eq ""){next;}  # skip the line if it is only a comment
		# padding is added, so that splitting can identify alternate names
		$A =~ s/\(/ \( /g;
		$A =~ s/\)/ \) /g;
		my @entries = split(/\s+/,$A);
		if( $entries[0] !~ /^[Rr][Ee][Ss][Ii][Dd][Uu][Ee]$/) {
			next;
		}
		my @tmparr;
		if($#entries < 2){
			my $count=$#entries+1;
			smog_quit("Looking for at least 3 fields in $mapOption, but found $count. Offending line:\n$line");
		}

		my $rn=$entries[1];
		if(exists $ignorename{$rn}){
			smog_quit("Atoms in residue \"$rn\" listed in map file, but the same residue is also listed under ignoreRes.");
		}
		# add residue definition to map hash.  Also, add all permutations of alternate atom names
		checkDupGetAlt(\@entries,$line);
	}
	close MAP;
}

sub checkDupGetAlt
{
	# check that each entry on a residue line is unique
	my ($entries,$line)=@_;
	my @entries=@{$entries};
	my %tfound;
	my $altsets=0;
	my @altnames;
	my @strippedlist;
	my $strippedindex=0;
	for( my $I=2;$I<=$#entries;$I++){

		if($entries[$I] =~ m/\(/ ){
			$I++;
			until($entries[$I] =~ m/\)/ ){
				$altnames[$altsets] .= "$entries[$I] ";
				$I++;
				if($I>$#entries || $entries[$I] =~ m/\(/){
					smog_quit("Mapping file missing closing \")\" on line:\n\t$line");
				}
				$tfound{$entries[$I]}=atomfound(\%tfound,$entries[$I],$line);
			}
			$altsets++;

		}elsif($entries[$I] !~ m/\)/ ){
			$strippedlist[$strippedindex]=$entries[$I];
			$strippedindex++;
		}
	
		# if not seen, atomfound returns 0.  If found, smog_quit
		$tfound{$entries[$I]}=atomfound(\%tfound,$entries[$I],$line);
	}

	for( my $I=0;$I<$altsets;$I++){
		$altnames[$I] =~ s/^\s+//g;
		$altnames[$I] =~ s/\s+$//g;
	}

	makesubs($entries[1],\@strippedlist,\@altnames,0,"");

}

sub makesubs
{
	my ($resname,$list,$alts,$altindex,$string)=@_;

	my @alts=@{$alts};


	if($altindex <= $#alts){
		my @altlist=split(/\s+/,$alts[$altindex]);
		foreach my $enter(@altlist){
			my $newstring=$string . "$enter ";
			$altname{"$resname-$enter"}=$altlist[0];
			makesubs($resname,$list,\@alts,$altindex+1,"$newstring");
		}
	}else{
		my @add=split(/\s+/,$string);
		my @tmparr=@{$list};
		push(@tmparr,@add);
		# we get here because we have completed our list
		my $str="";
		my $flag="";
		foreach my $I (sort @tmparr) {
			if($I =~ m/^%/){
				$I =~ s/%//g;
				if(!exists $supported_residue_tags{"$I"}){
					smog_quit("Residue tag \"\%$I\" is not supported");
				}
				$flag=" $I";
			}else{
				$str.="$I ";
			}
		}
		$str.="$flag";
		if(!exists $map{$str}) {
		        $map{$str}=$resname;
		} else {
		        smog_quit("Mapping file ($mapOption) defines two residues as having the same atoms: \"$map{$str}\" and \"$resname\"");
		}
	}
}

sub atomfound
{
	my ($tfound,$entry,$line)=@_;

	if(exists ${$tfound}{$entry} && $entry !~ m/\(/ && $entry !~ m/\)/){
		smog_quit("Mapping file: Duplicate atom ($entry) defined in residue on line:\n\t $line");
	}
	return 0;
}

sub legacymatching
{
	my ($resName,$resInd,$chainName,$isFirst,$isLast,$removestring) = @_;

	if(!exists $map{$resName}{"head"} || !exists $map{$resName}{"tail"}){smog_quit("Issue with residue $resName - please check the map file to make sure the residue name is defined.");}
	## Adjust Tail\Head names ##
	if($isFirst && $isLast){
		if("$map{$resName}{\"tail\"}" eq "$map{$resName}{\"head\"}"){
			# if definitions are the same, just call it head
			$isLast=0;
		}else{
			smog_quit("Encountered a single-residue chain. Unclear whether to treat this as a head, or tail...");
		}
	}
	if ($isFirst){
		my $newResName = $map{$resName}{"head"};
		$resName = $newResName;
	}
	if ($isLast){
			my $newResName = $map{$resName}{"tail"};
			$resName = 	$newResName;
	}
	
	# check if subALA
	if(defined $subALA && $resName ne "ALA" && $resName ne "ALAT"){
		# only check to sub if turned on, and not already ALA
		my %atomsin;
		for(my $i=0; $i<=$loopInd; $i++){
			my $aName = $residue[$i]->{"atomName"};
			$atomsin{$aName}=1;
		}
		if($loopInd == 4){
			if(exists $atomsin{"C"} && exists $atomsin{"CA"} && exists $atomsin{"N"} && exists $atomsin{"O"} && exists $atomsin{"CB"} ){
				$resName="ALA"
			}
		}
		if($loopInd == 5){
			if(exists $atomsin{"C"} && exists $atomsin{"CA"} && exists $atomsin{"N"} && exists $atomsin{"O"} && exists $atomsin{"CB"} && exists $atomsin{"OXT"} ){
				$resName="ALAT"
			}
		}
	}
	my $printthis="";
	for(my $i=0; $i<=$loopInd; $i++){
		my $aName = $residue[$i]->{"atomName"};
		$aName =~ s/'/*/g;
		if ($aName eq "OP1"){$aName="O1P"};
		if ($aName eq "OP2"){$aName="O2P"};
		if ($aName eq "OP3"){$aName="O3P"};
		if (($resName eq "ILE" || $resName eq "ILET") &&  $aName eq "CD"){$aName="CD1"};
		my $ind = $residue[$i]->{"atomIndex"};
		my $x = $residue[$i]->{"x"};
		my $y = $residue[$i]->{"y"};
		my $z = $residue[$i]->{"z"};
		if(defined $removeH && $aName =~ m/^H/){
			$removestring .= "$resName$resInd-$aName ";
		}else{
			$printthis.=sprintf("ATOM  %5d %4s %-4s%s%4d    %8.3f%8.3f%8.3f\n",$ind,$aName,$resName,$chainName,$resInd,$x,$y,$z);
		}
	}
	return($printthis,$removestring);
}

sub exactmatching
{
	my ($k,$resName,$resInd,$resIDorig,$chainName,$isFirst,$isLast,$removestring,$renamedstring) = @_;

	# get and sort atom names. We can update this with regexes later for more complex matching

	# first, replace atom names globally
	my @tmparr;
	my %namemap;
	for(my $i=0; $i<=$loopInd; $i++){
		my $aName = $residue[$i]->{"atomName"};
		if(exists $rename{"$aName"}){
			my $tn=$aName;
			$aName=$rename{"$aName"};
			$renamedstring .="$resName$resIDorig-$tn->$aName ";
		} 
		$namemap{$aName}=$i;
		$tmparr[$i]=$aName;
	}
	my $str="";
	my @sorted;
	my $sortn=0;
	foreach my $I(sort @tmparr) {
		unless(defined $removeH && $I =~ m/^H/){
			$str.="$I ";
			$sorted[$sortn]=$namemap{$I};
  			$sortn++;
		}
	}
	my $nres;
	if(!exists $ignorename{$resName}) {
		if ($isFirst == 1 && exists $map{"$str first"}) {
			$nres=$map{"$str first"};
		} elsif ($isLast == 1 && exists $map{"$str last"}) {
			$nres=$map{"$str last"};
		} elsif (exists $map{$str}) {
			$nres=$map{$str};
		} else {
			smog_quit("Unable to find a match for residue beginning with:\n$pArr[$k-$loopInd-1]\n Found the following atoms and conditions in the PDB for this residue:\n\t $str");
		} 

		if ($resName ne $nres) {
			$renamedstring .="$resName-$resIDorig->$nres-$resInd "; 
		}

	} else {
		#ignoring renaming of this residue	
		$nres=$resName;
	}
	my $printthis="";
	my @order;
	if (defined $sort){
		# use ordered list for atom sorting
		for(my $i=0; $i<=$loopInd; $i++){
			$order[$i]=$sorted[$i];
		}
	}else{
		# keep PDB ordering
		for(my $i=0; $i<=$loopInd; $i++){
			$order[$i]=$i;
		}
	}

	for(my $j=0; $j<=$loopInd; $j++){
		my $i=$order[$j];
		my $ind = $residue[$i]->{"atomIndex"};
		my $x = $residue[$i]->{"x"};
		my $y = $residue[$i]->{"y"};
		my $z = $residue[$i]->{"z"};
		my $aName = $tmparr[$i];
		
		if(exists $altname{"$nres-$aName"} && !exists $ignorename{$resName}){
			$aName=$altname{"$nres-$aName"};
		}
		if(defined $removeH && $aName =~ m/^H/){
			$removestring .= "$resName$resInd-$aName ";
		}else{
		    	$printthis.=sprintf("ATOM  %5s %4s %-4s%s%4s    %8.3f%8.3f%8.3f\n",$ind,$aName,$nres,$chainName,$resInd,$x,$y,$z);
		}
	}
	return($printthis,$removestring,$renamedstring);
}


# END OF SUBROUTINES

