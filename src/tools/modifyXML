#########################################################################################
#                          Structure-based Model (SMOG) software
#    This package is the product of contributions from a number of people, including:
#            Jeffrey Noel, Mariana Levi, Antonio Oliveira, VinÃ­cius Contessoto,
#             Mohit Raghunathan, Joyce Yang, Prasad Bandarkar, Udayan Mohanty,
#                          Ailun Wang, Heiko Lammert, Ryan Hayes,
#                               Jose Onuchic & Paul Whitford
#
#        Copyright (c) 2015,2016,2018,2021,2022,2023 The SMOG development team at
#                      The Center for Theoretical Biological Physics
#                       Rice University and Northeastern University
#
#          SMOG 2, Shadow and OpenSMOG are available at http://smog-server.org
#
#          You can direct questions to info@smog-server.org, or the smog-users forum,
#          which you can find at https://mailman.rice.edu/mailman/listinfo/smog-users
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#########################################################################################

###########################
# modifyXML is used for smog_modifyXML
###########################

use strict;
use warnings FATAL => 'all';
use smog_common;
use List::Util qw(max);
use Getopt::Long;
use OpenSMOG;

our @ISA = 'Exporter';
our @EXPORT = qw(%supported_directives);
my $inputArguments=join(' ',@ARGV);
my $gitver=getgitver;
if($gitver ne ""){
        $gitver="\nTHIS VERSION IS FROM A GIT REPO. COMMIT NUMBER\n$gitver\n";
}
print <<EOT;
********************************************************************************************

                                      smog_modifyXML
$gitver
      	smog_modifyXML is part of the SMOG 2 distribution, available at smog-server.org

        This tool uses an OpenSMOG xml file, along with an atom list file to generate a 
        new OpenSMOG xml file in which specified force field parameters are modified. 
	This allows for one to fully customize any subset of interactions in an OpenSMOG
        model. 

        For usage information, issue flag -help, or see the SMOG manual.

        For questions regarding this script, contact info\@smog-server.org

********************************************************************************************

EOT


my $indexFile="smog.ndx";
my $outputtop="scaled.top";
my $help;
my $inputXML="OpenSMOG.xml";
my $outputXML="OpenSMOG.out.xml";
my $modifytype;
my $modifyset;
my $modifygroup1;
my $modifygroup2;
my $modifyparameter;
my $modifyparameterby;

quit_init();
note_init();
checkForModules();
usage() if (!GetOptions('help|?' => \$help,  'n=s' => \$indexFile, 'OpenSMOG=s' => \$inputXML, 'OpenSMOGout=s' => \$outputXML,  'warn=i' => \$maxwarn, '<>' => \&usage,'modtype=s' => \$modifytype, 'modset=s' => \$modifyset,'modgrp1=s'=>\$modifygroup1,'modgrp2=s'=>\$modifygroup2,'modparam=s'=>\$modifyparameter,'modby=s'=>\$modifyparameterby)
        or defined $help); 

#add a flag to indicate which atom group name to scale
# add checks for consistent parameter assignment

if(defined $modifytype || defined $modifyset || defined $modifygroup1 || defined $modifygroup2 ||  defined $modifyparameter || defined $modifyparameterby){

	if (! defined $modifytype || ! defined $modifyset || ! defined $modifygroup1 || !defined $modifyparameter || !defined $modifyparameterby){
		smog_quit("When specifying modifications from the command line, one must specify -modtype, -modset, -modgrp1, -modgrp2 (for modtype contacts, only), -modparam and -modby.")
	}

}

if (defined $modifytype ){
	if ($modifytype eq "contacts"){
		if(! defined $modifygroup2){
			smog_quit("When modifying contacts, one must also give a value with the -modgrp2 flag.");
		}
	}elsif($modifytype eq "dihedrals"){
		if(defined $modifygroup2){
			smog_quit("When modifying dihedrals, one can not specify a value with the -modgrp2 flag.");
		}
	}else{
		smog_quit("-modtype must be \"contacts\" or \"dihedrals\".  Found \"$modifytype\"\n");
	}
}

### read in the list of atoms that we want to keep
my %keepatoms;
my $KEEPN=0;
my @keepatoms2;

#check and add file name extensions, if missing
$indexFile=checksuffix($indexFile,".ndx");
$outputXML=checksuffix($outputXML,".xml");
checkalreadyexists($outputXML);

### read in the list of atoms that we want to keep
my $groupname;
my $extgrp;

my ($Ngrps,$grpnms,$groupnames,$atomgroup) = readindexfile($indexFile);

if($Ngrps==0){
	smog_quit("No atom groups found in ndx file.");
}

# information about any OpenSMOG terms 
print "\nReading OpenSMOG force field information in $inputXML\n\n";
my $xmldata=readOpenSMOGxml($inputXML);
if($xmldata == 1){
	smog_quit("File $inputXML can not be opened.");
}
my $date=printhostdate();
$gitver=getgitver; 
my $gitmess="";
if($gitver ne ""){
        $gitmess="; THIS VERSION OF SMOG_IONS IS FROM A GIT REPO. COMMIT NUMBER\n$gitver\n";
		}
		
my $comment="; This is an XML file generated with smog_modifyXML (version $VERSION), using the command:\n; smog_modifyXML $inputArguments\n$date$gitmess";

if (defined $modifytype){
	# must have used the command line
	OpenSMOGscaleXMLcl($xmldata, $atomgroup, $outputXML, $comment, $modifytype, $modifyset, $modifygroup1, $modifygroup2, $modifyparameter,$modifyparameterby);
}else{
	OpenSMOGscaleXML($xmldata,$Ngrps,$grpnms,$groupnames,$atomgroup,$outputXML,$comment);
}
warnsummary();

print "\n\tDone modifying OpenSMOG parameters.\n\n";
exit(0);


##############SUBROUTINES##########################3
sub usage
{
  print <<EOT;

There are two ways to use this tool.  
	- You may just give the input XML file, along with an index file, and then 
		follow the interactive prompts. This approach will let you modify
		multiple parameters and interaction groups at once.
	- You can give the interaction type on the command line. In this approach,
		you can only change one parameter for one interaction group at a time.

usage: smog_modifyXML  .. options ..

   Options 
	-OpenSMOG [OpenSMOG.xml]        : also process an OpenSMOG xml file. This file is generated by smog2
                                          if the -OpenSMOG option was used.
	-OpenSMOGout [OpenSMOG.out.xml] : output file name for processed OpenSMOG xml file
	-n [smog.ndx]		        : index file to define groups for rescaling

   Command-line invocation flags:
        -modtype <string>               : type of interactions to modify (contacts, or dihedrals)
        -modset <string>                : which set of interactions should be modified (as named in XML file)
        -modgrp1 <string>               : name of first group of atoms (as named in .ndx file)
        -modgrp2 <string>               : name of second group of atoms (only for use with contacts)
        -modparam <string>              : which parameter should be modified
        -modby  <string>                : expression for modifying parameter. Format: [+-*/]<number>
                                            Note: to avoid shell issues, you may want to put the 
                                            expression in double quotes, or escape the first character
	-warn [0]		        : convert the first N errors into warnings
	-help			        : show options
EOT
  if ( @_ ){
   smog_quit("Command-line argument \"@_\" not recognized.");
  }else{
   exit(1);
  }
}

